# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RewardProgramArgs', 'RewardProgram']

@pulumi.input_type
class RewardProgramArgs:
    def __init__(__self__, *,
                 company_name: Optional[pulumi.Input[str]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 member_name: Optional[pulumi.Input[str]] = None,
                 more_information: Optional[Any] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 pin: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RewardProgram resource.
        """
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if member_name is not None:
            pulumi.set(__self__, "member_name", member_name)
        if more_information is not None:
            pulumi.set(__self__, "more_information", more_information)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if pin is not None:
            pulumi.set(__self__, "pin", pin)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_name", value)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "member_name")

    @member_name.setter
    def member_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_name", value)

    @property
    @pulumi.getter(name="moreInformation")
    def more_information(self) -> Optional[Any]:
        return pulumi.get(self, "more_information")

    @more_information.setter
    def more_information(self, value: Optional[Any]):
        pulumi.set(self, "more_information", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pin")

    @pin.setter
    def pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pin", value)


class RewardProgram(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 company_name: Optional[pulumi.Input[str]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 member_name: Optional[pulumi.Input[str]] = None,
                 more_information: Optional[Any] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 pin: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RewardProgram resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RewardProgramArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RewardProgram resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RewardProgramArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RewardProgramArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 company_name: Optional[pulumi.Input[str]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 member_name: Optional[pulumi.Input[str]] = None,
                 more_information: Optional[Any] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 pin: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RewardProgramArgs.__new__(RewardProgramArgs)

            __props__.__dict__["company_name"] = company_name
            __props__.__dict__["member_id"] = member_id
            __props__.__dict__["member_name"] = member_name
            __props__.__dict__["more_information"] = more_information
            __props__.__dict__["notes"] = notes
            __props__.__dict__["pin"] = pin
        super(RewardProgram, __self__).__init__(
            'onepassword:index:RewardProgram',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'RewardProgram':
        """
        Get an existing RewardProgram resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RewardProgramArgs.__new__(RewardProgramArgs)

        return RewardProgram(resource_name, opts=opts, __props__=__props__)

