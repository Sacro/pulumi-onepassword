# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OutdoorLicenseArgs', 'OutdoorLicense']

@pulumi.input_type
class OutdoorLicenseArgs:
    def __init__(__self__, *,
                 approved_wildlife: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 maximum_quota: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 valid_from: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OutdoorLicense resource.
        """
        if approved_wildlife is not None:
            pulumi.set(__self__, "approved_wildlife", approved_wildlife)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if maximum_quota is not None:
            pulumi.set(__self__, "maximum_quota", maximum_quota)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if valid_from is not None:
            pulumi.set(__self__, "valid_from", valid_from)

    @property
    @pulumi.getter(name="approvedWildlife")
    def approved_wildlife(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "approved_wildlife")

    @approved_wildlife.setter
    def approved_wildlife(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "approved_wildlife", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter(name="maximumQuota")
    def maximum_quota(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_quota")

    @maximum_quota.setter
    def maximum_quota(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_quota", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="validFrom")
    def valid_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "valid_from")

    @valid_from.setter
    def valid_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "valid_from", value)


class OutdoorLicense(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approved_wildlife: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 maximum_quota: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 valid_from: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OutdoorLicense resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OutdoorLicenseArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OutdoorLicense resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OutdoorLicenseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OutdoorLicenseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approved_wildlife: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 maximum_quota: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 valid_from: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OutdoorLicenseArgs.__new__(OutdoorLicenseArgs)

            __props__.__dict__["approved_wildlife"] = approved_wildlife
            __props__.__dict__["country"] = country
            __props__.__dict__["expires"] = expires
            __props__.__dict__["full_name"] = full_name
            __props__.__dict__["maximum_quota"] = maximum_quota
            __props__.__dict__["notes"] = notes
            __props__.__dict__["state"] = state
            __props__.__dict__["valid_from"] = valid_from
        super(OutdoorLicense, __self__).__init__(
            'onepassword:index:OutdoorLicense',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'OutdoorLicense':
        """
        Get an existing OutdoorLicense resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OutdoorLicenseArgs.__new__(OutdoorLicenseArgs)

        return OutdoorLicense(resource_name, opts=opts, __props__=__props__)

