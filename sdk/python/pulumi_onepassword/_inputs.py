# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *

__all__ = [
    'FieldArgs',
    'SectionArgs',
]

@pulumi.input_type
class FieldArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 type: Optional[pulumi.Input['FieldAssignmentType']] = None):
        pulumi.set(__self__, "value", value)
        if type is None:
            type = 'text'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['FieldAssignmentType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['FieldAssignmentType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SectionArgs:
    def __init__(__self__, *,
                 fields: pulumi.Input[Mapping[str, pulumi.Input['FieldArgs']]]):
        pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Mapping[str, pulumi.Input['FieldArgs']]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Mapping[str, pulumi.Input['FieldArgs']]]):
        pulumi.set(self, "fields", value)


