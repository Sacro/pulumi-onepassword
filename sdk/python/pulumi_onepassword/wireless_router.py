# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WirelessRouterArgs', 'WirelessRouter']

@pulumi.input_type
class WirelessRouterArgs:
    def __init__(__self__, *,
                 air_port_id: Optional[pulumi.Input[str]] = None,
                 attached_storage_password: Optional[pulumi.Input[str]] = None,
                 base_station_name: Optional[pulumi.Input[str]] = None,
                 base_station_password: Optional[pulumi.Input[str]] = None,
                 network_name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 server_ip_address: Optional[pulumi.Input[str]] = None,
                 wireless_network_password: Optional[pulumi.Input[str]] = None,
                 wireless_security: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WirelessRouter resource.
        """
        if air_port_id is not None:
            pulumi.set(__self__, "air_port_id", air_port_id)
        if attached_storage_password is not None:
            pulumi.set(__self__, "attached_storage_password", attached_storage_password)
        if base_station_name is not None:
            pulumi.set(__self__, "base_station_name", base_station_name)
        if base_station_password is not None:
            pulumi.set(__self__, "base_station_password", base_station_password)
        if network_name is not None:
            pulumi.set(__self__, "network_name", network_name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if server_ip_address is not None:
            pulumi.set(__self__, "server_ip_address", server_ip_address)
        if wireless_network_password is not None:
            pulumi.set(__self__, "wireless_network_password", wireless_network_password)
        if wireless_security is not None:
            pulumi.set(__self__, "wireless_security", wireless_security)

    @property
    @pulumi.getter(name="airPortId")
    def air_port_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "air_port_id")

    @air_port_id.setter
    def air_port_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "air_port_id", value)

    @property
    @pulumi.getter(name="attachedStoragePassword")
    def attached_storage_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attached_storage_password")

    @attached_storage_password.setter
    def attached_storage_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attached_storage_password", value)

    @property
    @pulumi.getter(name="baseStationName")
    def base_station_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_station_name")

    @base_station_name.setter
    def base_station_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_station_name", value)

    @property
    @pulumi.getter(name="baseStationPassword")
    def base_station_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_station_password")

    @base_station_password.setter
    def base_station_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_station_password", value)

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_name")

    @network_name.setter
    def network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_name", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="serverIpAddress")
    def server_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_ip_address")

    @server_ip_address.setter
    def server_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ip_address", value)

    @property
    @pulumi.getter(name="wirelessNetworkPassword")
    def wireless_network_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wireless_network_password")

    @wireless_network_password.setter
    def wireless_network_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wireless_network_password", value)

    @property
    @pulumi.getter(name="wirelessSecurity")
    def wireless_security(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wireless_security")

    @wireless_security.setter
    def wireless_security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wireless_security", value)


class WirelessRouter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 air_port_id: Optional[pulumi.Input[str]] = None,
                 attached_storage_password: Optional[pulumi.Input[str]] = None,
                 base_station_name: Optional[pulumi.Input[str]] = None,
                 base_station_password: Optional[pulumi.Input[str]] = None,
                 network_name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 server_ip_address: Optional[pulumi.Input[str]] = None,
                 wireless_network_password: Optional[pulumi.Input[str]] = None,
                 wireless_security: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WirelessRouter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WirelessRouterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WirelessRouter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WirelessRouterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WirelessRouterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 air_port_id: Optional[pulumi.Input[str]] = None,
                 attached_storage_password: Optional[pulumi.Input[str]] = None,
                 base_station_name: Optional[pulumi.Input[str]] = None,
                 base_station_password: Optional[pulumi.Input[str]] = None,
                 network_name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 server_ip_address: Optional[pulumi.Input[str]] = None,
                 wireless_network_password: Optional[pulumi.Input[str]] = None,
                 wireless_security: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WirelessRouterArgs.__new__(WirelessRouterArgs)

            __props__.__dict__["air_port_id"] = air_port_id
            __props__.__dict__["attached_storage_password"] = attached_storage_password
            __props__.__dict__["base_station_name"] = base_station_name
            __props__.__dict__["base_station_password"] = base_station_password
            __props__.__dict__["network_name"] = network_name
            __props__.__dict__["notes"] = notes
            __props__.__dict__["server_ip_address"] = server_ip_address
            __props__.__dict__["wireless_network_password"] = wireless_network_password
            __props__.__dict__["wireless_security"] = wireless_security
        super(WirelessRouter, __self__).__init__(
            'onepassword:index:WirelessRouter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'WirelessRouter':
        """
        Get an existing WirelessRouter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WirelessRouterArgs.__new__(WirelessRouterArgs)

        return WirelessRouter(resource_name, opts=opts, __props__=__props__)

