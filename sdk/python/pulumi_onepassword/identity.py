# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IdentityArgs', 'Identity']

@pulumi.input_type
class IdentityArgs:
    def __init__(__self__, *,
                 address: Optional[Any] = None,
                 identification: Optional[Any] = None,
                 internet_details: Optional[Any] = None,
                 notes: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Identity resource.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if identification is not None:
            pulumi.set(__self__, "identification", identification)
        if internet_details is not None:
            pulumi.set(__self__, "internet_details", internet_details)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)

    @property
    @pulumi.getter
    def address(self) -> Optional[Any]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[Any]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def identification(self) -> Optional[Any]:
        return pulumi.get(self, "identification")

    @identification.setter
    def identification(self, value: Optional[Any]):
        pulumi.set(self, "identification", value)

    @property
    @pulumi.getter(name="internetDetails")
    def internet_details(self) -> Optional[Any]:
        return pulumi.get(self, "internet_details")

    @internet_details.setter
    def internet_details(self, value: Optional[Any]):
        pulumi.set(self, "internet_details", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)


class Identity(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[Any] = None,
                 identification: Optional[Any] = None,
                 internet_details: Optional[Any] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Identity resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IdentityArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Identity resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IdentityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IdentityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[Any] = None,
                 identification: Optional[Any] = None,
                 internet_details: Optional[Any] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IdentityArgs.__new__(IdentityArgs)

            __props__.__dict__["address"] = address
            __props__.__dict__["identification"] = identification
            __props__.__dict__["internet_details"] = internet_details
            __props__.__dict__["notes"] = notes
        super(Identity, __self__).__init__(
            'onepassword:index:Identity',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Identity':
        """
        Get an existing Identity resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = IdentityArgs.__new__(IdentityArgs)

        return Identity(resource_name, opts=opts, __props__=__props__)

