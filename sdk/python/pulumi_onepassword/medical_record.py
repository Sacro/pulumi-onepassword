# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['MedicalRecordArgs', 'MedicalRecord']

@pulumi.input_type
class MedicalRecordArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[str]] = None,
                 healthcare_professional: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 medication: Optional[Any] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 patient: Optional[pulumi.Input[str]] = None,
                 reason_for_visit: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MedicalRecord resource.
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if healthcare_professional is not None:
            pulumi.set(__self__, "healthcare_professional", healthcare_professional)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if medication is not None:
            pulumi.set(__self__, "medication", medication)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if patient is not None:
            pulumi.set(__self__, "patient", patient)
        if reason_for_visit is not None:
            pulumi.set(__self__, "reason_for_visit", reason_for_visit)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter(name="healthcareProfessional")
    def healthcare_professional(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "healthcare_professional")

    @healthcare_professional.setter
    def healthcare_professional(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcare_professional", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def medication(self) -> Optional[Any]:
        return pulumi.get(self, "medication")

    @medication.setter
    def medication(self, value: Optional[Any]):
        pulumi.set(self, "medication", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def patient(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "patient")

    @patient.setter
    def patient(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "patient", value)

    @property
    @pulumi.getter(name="reasonForVisit")
    def reason_for_visit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason_for_visit")

    @reason_for_visit.setter
    def reason_for_visit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason_for_visit", value)


class MedicalRecord(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 date: Optional[pulumi.Input[str]] = None,
                 healthcare_professional: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 medication: Optional[Any] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 patient: Optional[pulumi.Input[str]] = None,
                 reason_for_visit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MedicalRecord resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[MedicalRecordArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MedicalRecord resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MedicalRecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MedicalRecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 date: Optional[pulumi.Input[str]] = None,
                 healthcare_professional: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 medication: Optional[Any] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 patient: Optional[pulumi.Input[str]] = None,
                 reason_for_visit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MedicalRecordArgs.__new__(MedicalRecordArgs)

            __props__.__dict__["date"] = date
            __props__.__dict__["healthcare_professional"] = healthcare_professional
            __props__.__dict__["location"] = location
            __props__.__dict__["medication"] = medication
            __props__.__dict__["notes"] = notes
            __props__.__dict__["patient"] = patient
            __props__.__dict__["reason_for_visit"] = reason_for_visit
        super(MedicalRecord, __self__).__init__(
            'onepassword:index:MedicalRecord',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'MedicalRecord':
        """
        Get an existing MedicalRecord resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MedicalRecordArgs.__new__(MedicalRecordArgs)

        return MedicalRecord(resource_name, opts=opts, __props__=__props__)

