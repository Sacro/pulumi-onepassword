// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-onepassword/sdk/go/onepassword/medicalrecord"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MedicalRecord struct {
	pulumi.CustomResourceState

	Category               pulumi.StringOutput               `pulumi:"category"`
	Date                   pulumi.StringPtrOutput            `pulumi:"date"`
	Fields                 GetFieldArrayOutput               `pulumi:"fields"`
	HealthcareProfessional pulumi.StringPtrOutput            `pulumi:"healthcareProfessional"`
	Id                     pulumi.StringOutput               `pulumi:"id"`
	Location               pulumi.StringPtrOutput            `pulumi:"location"`
	Medication             medicalrecord.MedicationPtrOutput `pulumi:"medication"`
	Notes                  pulumi.StringPtrOutput            `pulumi:"notes"`
	Patient                pulumi.StringPtrOutput            `pulumi:"patient"`
	ReasonForVisit         pulumi.StringPtrOutput            `pulumi:"reasonForVisit"`
	Sections               GetSectionArrayOutput             `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringOutput `pulumi:"title"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewMedicalRecord registers a new resource with the given unique name, arguments, and options.
func NewMedicalRecord(ctx *pulumi.Context,
	name string, args *MedicalRecordArgs, opts ...pulumi.ResourceOption) (*MedicalRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	var resource MedicalRecord
	err := ctx.RegisterResource("onepassword:index:MedicalRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMedicalRecord gets an existing MedicalRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMedicalRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MedicalRecordState, opts ...pulumi.ResourceOption) (*MedicalRecord, error) {
	var resource MedicalRecord
	err := ctx.ReadResource("onepassword:index:MedicalRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MedicalRecord resources.
type medicalRecordState struct {
}

type MedicalRecordState struct {
}

func (MedicalRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*medicalRecordState)(nil)).Elem()
}

type medicalRecordArgs struct {
	Date                   *string                   `pulumi:"date"`
	Fields                 []Field                   `pulumi:"fields"`
	HealthcareProfessional *string                   `pulumi:"healthcareProfessional"`
	Location               *string                   `pulumi:"location"`
	Medication             *medicalrecord.Medication `pulumi:"medication"`
	Notes                  *string                   `pulumi:"notes"`
	Patient                *string                   `pulumi:"patient"`
	ReasonForVisit         *string                   `pulumi:"reasonForVisit"`
	Sections               []Section                 `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title string `pulumi:"title"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// The set of arguments for constructing a MedicalRecord resource.
type MedicalRecordArgs struct {
	Date                   pulumi.StringPtrInput
	Fields                 FieldArrayInput
	HealthcareProfessional pulumi.StringPtrInput
	Location               pulumi.StringPtrInput
	Medication             medicalrecord.MedicationPtrInput
	Notes                  pulumi.StringPtrInput
	Patient                pulumi.StringPtrInput
	ReasonForVisit         pulumi.StringPtrInput
	Sections               SectionArrayInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput
}

func (MedicalRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*medicalRecordArgs)(nil)).Elem()
}

type MedicalRecordInput interface {
	pulumi.Input

	ToMedicalRecordOutput() MedicalRecordOutput
	ToMedicalRecordOutputWithContext(ctx context.Context) MedicalRecordOutput
}

func (*MedicalRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**MedicalRecord)(nil)).Elem()
}

func (i *MedicalRecord) ToMedicalRecordOutput() MedicalRecordOutput {
	return i.ToMedicalRecordOutputWithContext(context.Background())
}

func (i *MedicalRecord) ToMedicalRecordOutputWithContext(ctx context.Context) MedicalRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedicalRecordOutput)
}

// MedicalRecordArrayInput is an input type that accepts MedicalRecordArray and MedicalRecordArrayOutput values.
// You can construct a concrete instance of `MedicalRecordArrayInput` via:
//
//	MedicalRecordArray{ MedicalRecordArgs{...} }
type MedicalRecordArrayInput interface {
	pulumi.Input

	ToMedicalRecordArrayOutput() MedicalRecordArrayOutput
	ToMedicalRecordArrayOutputWithContext(context.Context) MedicalRecordArrayOutput
}

type MedicalRecordArray []MedicalRecordInput

func (MedicalRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MedicalRecord)(nil)).Elem()
}

func (i MedicalRecordArray) ToMedicalRecordArrayOutput() MedicalRecordArrayOutput {
	return i.ToMedicalRecordArrayOutputWithContext(context.Background())
}

func (i MedicalRecordArray) ToMedicalRecordArrayOutputWithContext(ctx context.Context) MedicalRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedicalRecordArrayOutput)
}

// MedicalRecordMapInput is an input type that accepts MedicalRecordMap and MedicalRecordMapOutput values.
// You can construct a concrete instance of `MedicalRecordMapInput` via:
//
//	MedicalRecordMap{ "key": MedicalRecordArgs{...} }
type MedicalRecordMapInput interface {
	pulumi.Input

	ToMedicalRecordMapOutput() MedicalRecordMapOutput
	ToMedicalRecordMapOutputWithContext(context.Context) MedicalRecordMapOutput
}

type MedicalRecordMap map[string]MedicalRecordInput

func (MedicalRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MedicalRecord)(nil)).Elem()
}

func (i MedicalRecordMap) ToMedicalRecordMapOutput() MedicalRecordMapOutput {
	return i.ToMedicalRecordMapOutputWithContext(context.Background())
}

func (i MedicalRecordMap) ToMedicalRecordMapOutputWithContext(ctx context.Context) MedicalRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedicalRecordMapOutput)
}

type MedicalRecordOutput struct{ *pulumi.OutputState }

func (MedicalRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MedicalRecord)(nil)).Elem()
}

func (o MedicalRecordOutput) ToMedicalRecordOutput() MedicalRecordOutput {
	return o
}

func (o MedicalRecordOutput) ToMedicalRecordOutputWithContext(ctx context.Context) MedicalRecordOutput {
	return o
}

type MedicalRecordArrayOutput struct{ *pulumi.OutputState }

func (MedicalRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MedicalRecord)(nil)).Elem()
}

func (o MedicalRecordArrayOutput) ToMedicalRecordArrayOutput() MedicalRecordArrayOutput {
	return o
}

func (o MedicalRecordArrayOutput) ToMedicalRecordArrayOutputWithContext(ctx context.Context) MedicalRecordArrayOutput {
	return o
}

func (o MedicalRecordArrayOutput) Index(i pulumi.IntInput) MedicalRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MedicalRecord {
		return vs[0].([]*MedicalRecord)[vs[1].(int)]
	}).(MedicalRecordOutput)
}

type MedicalRecordMapOutput struct{ *pulumi.OutputState }

func (MedicalRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MedicalRecord)(nil)).Elem()
}

func (o MedicalRecordMapOutput) ToMedicalRecordMapOutput() MedicalRecordMapOutput {
	return o
}

func (o MedicalRecordMapOutput) ToMedicalRecordMapOutputWithContext(ctx context.Context) MedicalRecordMapOutput {
	return o
}

func (o MedicalRecordMapOutput) MapIndex(k pulumi.StringInput) MedicalRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MedicalRecord {
		return vs[0].(map[string]*MedicalRecord)[vs[1].(string)]
	}).(MedicalRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MedicalRecordInput)(nil)).Elem(), &MedicalRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*MedicalRecordArrayInput)(nil)).Elem(), MedicalRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MedicalRecordMapInput)(nil)).Elem(), MedicalRecordMap{})
	pulumi.RegisterOutputType(MedicalRecordOutput{})
	pulumi.RegisterOutputType(MedicalRecordArrayOutput{})
	pulumi.RegisterOutputType(MedicalRecordMapOutput{})
}
