// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DriverLicense struct {
	pulumi.CustomResourceState

	Address                pulumi.StringPtrOutput `pulumi:"address"`
	Category               pulumi.StringOutput    `pulumi:"category"`
	ConditionsRestrictions pulumi.StringPtrOutput `pulumi:"conditionsRestrictions"`
	Country                pulumi.StringPtrOutput `pulumi:"country"`
	DateOfBirth            pulumi.StringPtrOutput `pulumi:"dateOfBirth"`
	ExpiryDate             pulumi.StringPtrOutput `pulumi:"expiryDate"`
	Fields                 GetFieldArrayOutput    `pulumi:"fields"`
	FullName               pulumi.StringPtrOutput `pulumi:"fullName"`
	Gender                 pulumi.StringPtrOutput `pulumi:"gender"`
	Height                 pulumi.StringPtrOutput `pulumi:"height"`
	Id                     pulumi.StringOutput    `pulumi:"id"`
	LicenseClass           pulumi.StringPtrOutput `pulumi:"licenseClass"`
	Notes                  pulumi.StringPtrOutput `pulumi:"notes"`
	Number                 pulumi.StringPtrOutput `pulumi:"number"`
	Sections               GetSectionArrayOutput  `pulumi:"sections"`
	State                  pulumi.StringPtrOutput `pulumi:"state"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringOutput `pulumi:"title"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewDriverLicense registers a new resource with the given unique name, arguments, and options.
func NewDriverLicense(ctx *pulumi.Context,
	name string, args *DriverLicenseArgs, opts ...pulumi.ResourceOption) (*DriverLicense, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	if isZero(args.Category) {
		args.Category = pulumi.String("Item")
	}
	var resource DriverLicense
	err := ctx.RegisterResource("onepassword:index:DriverLicense", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDriverLicense gets an existing DriverLicense resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDriverLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DriverLicenseState, opts ...pulumi.ResourceOption) (*DriverLicense, error) {
	var resource DriverLicense
	err := ctx.ReadResource("onepassword:index:DriverLicense", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DriverLicense resources.
type driverLicenseState struct {
}

type DriverLicenseState struct {
}

func (DriverLicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*driverLicenseState)(nil)).Elem()
}

type driverLicenseArgs struct {
	Address                *string   `pulumi:"address"`
	Category               string    `pulumi:"category"`
	ConditionsRestrictions *string   `pulumi:"conditionsRestrictions"`
	Country                *string   `pulumi:"country"`
	DateOfBirth            *string   `pulumi:"dateOfBirth"`
	ExpiryDate             *string   `pulumi:"expiryDate"`
	Fields                 []Field   `pulumi:"fields"`
	FullName               *string   `pulumi:"fullName"`
	Gender                 *string   `pulumi:"gender"`
	Height                 *string   `pulumi:"height"`
	LicenseClass           *string   `pulumi:"licenseClass"`
	Notes                  *string   `pulumi:"notes"`
	Number                 *string   `pulumi:"number"`
	Sections               []Section `pulumi:"sections"`
	State                  *string   `pulumi:"state"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title string `pulumi:"title"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// The set of arguments for constructing a DriverLicense resource.
type DriverLicenseArgs struct {
	Address                pulumi.StringPtrInput
	Category               pulumi.StringInput
	ConditionsRestrictions pulumi.StringPtrInput
	Country                pulumi.StringPtrInput
	DateOfBirth            pulumi.StringPtrInput
	ExpiryDate             pulumi.StringPtrInput
	Fields                 FieldArrayInput
	FullName               pulumi.StringPtrInput
	Gender                 pulumi.StringPtrInput
	Height                 pulumi.StringPtrInput
	LicenseClass           pulumi.StringPtrInput
	Notes                  pulumi.StringPtrInput
	Number                 pulumi.StringPtrInput
	Sections               SectionArrayInput
	State                  pulumi.StringPtrInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput
}

func (DriverLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*driverLicenseArgs)(nil)).Elem()
}

type DriverLicenseInput interface {
	pulumi.Input

	ToDriverLicenseOutput() DriverLicenseOutput
	ToDriverLicenseOutputWithContext(ctx context.Context) DriverLicenseOutput
}

func (*DriverLicense) ElementType() reflect.Type {
	return reflect.TypeOf((**DriverLicense)(nil)).Elem()
}

func (i *DriverLicense) ToDriverLicenseOutput() DriverLicenseOutput {
	return i.ToDriverLicenseOutputWithContext(context.Background())
}

func (i *DriverLicense) ToDriverLicenseOutputWithContext(ctx context.Context) DriverLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverLicenseOutput)
}

// DriverLicenseArrayInput is an input type that accepts DriverLicenseArray and DriverLicenseArrayOutput values.
// You can construct a concrete instance of `DriverLicenseArrayInput` via:
//
//	DriverLicenseArray{ DriverLicenseArgs{...} }
type DriverLicenseArrayInput interface {
	pulumi.Input

	ToDriverLicenseArrayOutput() DriverLicenseArrayOutput
	ToDriverLicenseArrayOutputWithContext(context.Context) DriverLicenseArrayOutput
}

type DriverLicenseArray []DriverLicenseInput

func (DriverLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DriverLicense)(nil)).Elem()
}

func (i DriverLicenseArray) ToDriverLicenseArrayOutput() DriverLicenseArrayOutput {
	return i.ToDriverLicenseArrayOutputWithContext(context.Background())
}

func (i DriverLicenseArray) ToDriverLicenseArrayOutputWithContext(ctx context.Context) DriverLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverLicenseArrayOutput)
}

// DriverLicenseMapInput is an input type that accepts DriverLicenseMap and DriverLicenseMapOutput values.
// You can construct a concrete instance of `DriverLicenseMapInput` via:
//
//	DriverLicenseMap{ "key": DriverLicenseArgs{...} }
type DriverLicenseMapInput interface {
	pulumi.Input

	ToDriverLicenseMapOutput() DriverLicenseMapOutput
	ToDriverLicenseMapOutputWithContext(context.Context) DriverLicenseMapOutput
}

type DriverLicenseMap map[string]DriverLicenseInput

func (DriverLicenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DriverLicense)(nil)).Elem()
}

func (i DriverLicenseMap) ToDriverLicenseMapOutput() DriverLicenseMapOutput {
	return i.ToDriverLicenseMapOutputWithContext(context.Background())
}

func (i DriverLicenseMap) ToDriverLicenseMapOutputWithContext(ctx context.Context) DriverLicenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DriverLicenseMapOutput)
}

type DriverLicenseOutput struct{ *pulumi.OutputState }

func (DriverLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DriverLicense)(nil)).Elem()
}

func (o DriverLicenseOutput) ToDriverLicenseOutput() DriverLicenseOutput {
	return o
}

func (o DriverLicenseOutput) ToDriverLicenseOutputWithContext(ctx context.Context) DriverLicenseOutput {
	return o
}

type DriverLicenseArrayOutput struct{ *pulumi.OutputState }

func (DriverLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DriverLicense)(nil)).Elem()
}

func (o DriverLicenseArrayOutput) ToDriverLicenseArrayOutput() DriverLicenseArrayOutput {
	return o
}

func (o DriverLicenseArrayOutput) ToDriverLicenseArrayOutputWithContext(ctx context.Context) DriverLicenseArrayOutput {
	return o
}

func (o DriverLicenseArrayOutput) Index(i pulumi.IntInput) DriverLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DriverLicense {
		return vs[0].([]*DriverLicense)[vs[1].(int)]
	}).(DriverLicenseOutput)
}

type DriverLicenseMapOutput struct{ *pulumi.OutputState }

func (DriverLicenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DriverLicense)(nil)).Elem()
}

func (o DriverLicenseMapOutput) ToDriverLicenseMapOutput() DriverLicenseMapOutput {
	return o
}

func (o DriverLicenseMapOutput) ToDriverLicenseMapOutputWithContext(ctx context.Context) DriverLicenseMapOutput {
	return o
}

func (o DriverLicenseMapOutput) MapIndex(k pulumi.StringInput) DriverLicenseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DriverLicense {
		return vs[0].(map[string]*DriverLicense)[vs[1].(string)]
	}).(DriverLicenseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DriverLicenseInput)(nil)).Elem(), &DriverLicense{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverLicenseArrayInput)(nil)).Elem(), DriverLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DriverLicenseMapInput)(nil)).Elem(), DriverLicenseMap{})
	pulumi.RegisterOutputType(DriverLicenseOutput{})
	pulumi.RegisterOutputType(DriverLicenseArrayOutput{})
	pulumi.RegisterOutputType(DriverLicenseMapOutput{})
}
