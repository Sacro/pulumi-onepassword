// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-onepassword/sdk/go/onepassword/softwarelicense"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SoftwareLicense struct {
	pulumi.CustomResourceState

	Category   pulumi.StringOutput                `pulumi:"category"`
	Customer   softwarelicense.CustomerPtrOutput  `pulumi:"customer"`
	Fields     GetFieldArrayOutput                `pulumi:"fields"`
	Id         pulumi.StringOutput                `pulumi:"id"`
	LicenseKey pulumi.StringPtrOutput             `pulumi:"licenseKey"`
	Notes      pulumi.StringPtrOutput             `pulumi:"notes"`
	Order      softwarelicense.OrderPtrOutput     `pulumi:"order"`
	Publisher  softwarelicense.PublisherPtrOutput `pulumi:"publisher"`
	Sections   GetSectionArrayOutput              `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringOutput `pulumi:"title"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault   pulumi.StringOutput    `pulumi:"vault"`
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewSoftwareLicense registers a new resource with the given unique name, arguments, and options.
func NewSoftwareLicense(ctx *pulumi.Context,
	name string, args *SoftwareLicenseArgs, opts ...pulumi.ResourceOption) (*SoftwareLicense, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	if isZero(args.Category) {
		args.Category = pulumi.String("Item")
	}
	var resource SoftwareLicense
	err := ctx.RegisterResource("onepassword:index:SoftwareLicense", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSoftwareLicense gets an existing SoftwareLicense resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSoftwareLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SoftwareLicenseState, opts ...pulumi.ResourceOption) (*SoftwareLicense, error) {
	var resource SoftwareLicense
	err := ctx.ReadResource("onepassword:index:SoftwareLicense", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SoftwareLicense resources.
type softwareLicenseState struct {
}

type SoftwareLicenseState struct {
}

func (SoftwareLicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareLicenseState)(nil)).Elem()
}

type softwareLicenseArgs struct {
	Category   string                     `pulumi:"category"`
	Customer   *softwarelicense.Customer  `pulumi:"customer"`
	Fields     []Field                    `pulumi:"fields"`
	LicenseKey *string                    `pulumi:"licenseKey"`
	Notes      *string                    `pulumi:"notes"`
	Order      *softwarelicense.Order     `pulumi:"order"`
	Publisher  *softwarelicense.Publisher `pulumi:"publisher"`
	Sections   []Section                  `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title string `pulumi:"title"`
	// The UUID of the vault the item is in.
	Vault   string  `pulumi:"vault"`
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a SoftwareLicense resource.
type SoftwareLicenseArgs struct {
	Category   pulumi.StringInput
	Customer   softwarelicense.CustomerPtrInput
	Fields     FieldArrayInput
	LicenseKey pulumi.StringPtrInput
	Notes      pulumi.StringPtrInput
	Order      softwarelicense.OrderPtrInput
	Publisher  softwarelicense.PublisherPtrInput
	Sections   SectionArrayInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringInput
	// The UUID of the vault the item is in.
	Vault   pulumi.StringInput
	Version pulumi.StringPtrInput
}

func (SoftwareLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareLicenseArgs)(nil)).Elem()
}

type SoftwareLicenseInput interface {
	pulumi.Input

	ToSoftwareLicenseOutput() SoftwareLicenseOutput
	ToSoftwareLicenseOutputWithContext(ctx context.Context) SoftwareLicenseOutput
}

func (*SoftwareLicense) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareLicense)(nil)).Elem()
}

func (i *SoftwareLicense) ToSoftwareLicenseOutput() SoftwareLicenseOutput {
	return i.ToSoftwareLicenseOutputWithContext(context.Background())
}

func (i *SoftwareLicense) ToSoftwareLicenseOutputWithContext(ctx context.Context) SoftwareLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareLicenseOutput)
}

// SoftwareLicenseArrayInput is an input type that accepts SoftwareLicenseArray and SoftwareLicenseArrayOutput values.
// You can construct a concrete instance of `SoftwareLicenseArrayInput` via:
//
//	SoftwareLicenseArray{ SoftwareLicenseArgs{...} }
type SoftwareLicenseArrayInput interface {
	pulumi.Input

	ToSoftwareLicenseArrayOutput() SoftwareLicenseArrayOutput
	ToSoftwareLicenseArrayOutputWithContext(context.Context) SoftwareLicenseArrayOutput
}

type SoftwareLicenseArray []SoftwareLicenseInput

func (SoftwareLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareLicense)(nil)).Elem()
}

func (i SoftwareLicenseArray) ToSoftwareLicenseArrayOutput() SoftwareLicenseArrayOutput {
	return i.ToSoftwareLicenseArrayOutputWithContext(context.Background())
}

func (i SoftwareLicenseArray) ToSoftwareLicenseArrayOutputWithContext(ctx context.Context) SoftwareLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareLicenseArrayOutput)
}

// SoftwareLicenseMapInput is an input type that accepts SoftwareLicenseMap and SoftwareLicenseMapOutput values.
// You can construct a concrete instance of `SoftwareLicenseMapInput` via:
//
//	SoftwareLicenseMap{ "key": SoftwareLicenseArgs{...} }
type SoftwareLicenseMapInput interface {
	pulumi.Input

	ToSoftwareLicenseMapOutput() SoftwareLicenseMapOutput
	ToSoftwareLicenseMapOutputWithContext(context.Context) SoftwareLicenseMapOutput
}

type SoftwareLicenseMap map[string]SoftwareLicenseInput

func (SoftwareLicenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareLicense)(nil)).Elem()
}

func (i SoftwareLicenseMap) ToSoftwareLicenseMapOutput() SoftwareLicenseMapOutput {
	return i.ToSoftwareLicenseMapOutputWithContext(context.Background())
}

func (i SoftwareLicenseMap) ToSoftwareLicenseMapOutputWithContext(ctx context.Context) SoftwareLicenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareLicenseMapOutput)
}

type SoftwareLicenseOutput struct{ *pulumi.OutputState }

func (SoftwareLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareLicense)(nil)).Elem()
}

func (o SoftwareLicenseOutput) ToSoftwareLicenseOutput() SoftwareLicenseOutput {
	return o
}

func (o SoftwareLicenseOutput) ToSoftwareLicenseOutputWithContext(ctx context.Context) SoftwareLicenseOutput {
	return o
}

type SoftwareLicenseArrayOutput struct{ *pulumi.OutputState }

func (SoftwareLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareLicense)(nil)).Elem()
}

func (o SoftwareLicenseArrayOutput) ToSoftwareLicenseArrayOutput() SoftwareLicenseArrayOutput {
	return o
}

func (o SoftwareLicenseArrayOutput) ToSoftwareLicenseArrayOutputWithContext(ctx context.Context) SoftwareLicenseArrayOutput {
	return o
}

func (o SoftwareLicenseArrayOutput) Index(i pulumi.IntInput) SoftwareLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SoftwareLicense {
		return vs[0].([]*SoftwareLicense)[vs[1].(int)]
	}).(SoftwareLicenseOutput)
}

type SoftwareLicenseMapOutput struct{ *pulumi.OutputState }

func (SoftwareLicenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareLicense)(nil)).Elem()
}

func (o SoftwareLicenseMapOutput) ToSoftwareLicenseMapOutput() SoftwareLicenseMapOutput {
	return o
}

func (o SoftwareLicenseMapOutput) ToSoftwareLicenseMapOutputWithContext(ctx context.Context) SoftwareLicenseMapOutput {
	return o
}

func (o SoftwareLicenseMapOutput) MapIndex(k pulumi.StringInput) SoftwareLicenseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SoftwareLicense {
		return vs[0].(map[string]*SoftwareLicense)[vs[1].(string)]
	}).(SoftwareLicenseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareLicenseInput)(nil)).Elem(), &SoftwareLicense{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareLicenseArrayInput)(nil)).Elem(), SoftwareLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareLicenseMapInput)(nil)).Elem(), SoftwareLicenseMap{})
	pulumi.RegisterOutputType(SoftwareLicenseOutput{})
	pulumi.RegisterOutputType(SoftwareLicenseArrayOutput{})
	pulumi.RegisterOutputType(SoftwareLicenseMapOutput{})
}
