// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package softwarelicense

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Customer struct {
	Company         *string `pulumi:"company"`
	LicensedTo      *string `pulumi:"licensedTo"`
	RegisteredEmail *string `pulumi:"registeredEmail"`
}

// CustomerInput is an input type that accepts CustomerArgs and CustomerOutput values.
// You can construct a concrete instance of `CustomerInput` via:
//
//	CustomerArgs{...}
type CustomerInput interface {
	pulumi.Input

	ToCustomerOutput() CustomerOutput
	ToCustomerOutputWithContext(context.Context) CustomerOutput
}

type CustomerArgs struct {
	Company         pulumi.StringPtrInput `pulumi:"company"`
	LicensedTo      pulumi.StringPtrInput `pulumi:"licensedTo"`
	RegisteredEmail pulumi.StringPtrInput `pulumi:"registeredEmail"`
}

func (CustomerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Customer)(nil)).Elem()
}

func (i CustomerArgs) ToCustomerOutput() CustomerOutput {
	return i.ToCustomerOutputWithContext(context.Background())
}

func (i CustomerArgs) ToCustomerOutputWithContext(ctx context.Context) CustomerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerOutput)
}

func (i CustomerArgs) ToCustomerPtrOutput() CustomerPtrOutput {
	return i.ToCustomerPtrOutputWithContext(context.Background())
}

func (i CustomerArgs) ToCustomerPtrOutputWithContext(ctx context.Context) CustomerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerOutput).ToCustomerPtrOutputWithContext(ctx)
}

// CustomerPtrInput is an input type that accepts CustomerArgs, CustomerPtr and CustomerPtrOutput values.
// You can construct a concrete instance of `CustomerPtrInput` via:
//
//	        CustomerArgs{...}
//
//	or:
//
//	        nil
type CustomerPtrInput interface {
	pulumi.Input

	ToCustomerPtrOutput() CustomerPtrOutput
	ToCustomerPtrOutputWithContext(context.Context) CustomerPtrOutput
}

type customerPtrType CustomerArgs

func CustomerPtr(v *CustomerArgs) CustomerPtrInput {
	return (*customerPtrType)(v)
}

func (*customerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Customer)(nil)).Elem()
}

func (i *customerPtrType) ToCustomerPtrOutput() CustomerPtrOutput {
	return i.ToCustomerPtrOutputWithContext(context.Background())
}

func (i *customerPtrType) ToCustomerPtrOutputWithContext(ctx context.Context) CustomerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerPtrOutput)
}

type CustomerOutput struct{ *pulumi.OutputState }

func (CustomerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Customer)(nil)).Elem()
}

func (o CustomerOutput) ToCustomerOutput() CustomerOutput {
	return o
}

func (o CustomerOutput) ToCustomerOutputWithContext(ctx context.Context) CustomerOutput {
	return o
}

func (o CustomerOutput) ToCustomerPtrOutput() CustomerPtrOutput {
	return o.ToCustomerPtrOutputWithContext(context.Background())
}

func (o CustomerOutput) ToCustomerPtrOutputWithContext(ctx context.Context) CustomerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Customer) *Customer {
		return &v
	}).(CustomerPtrOutput)
}

func (o CustomerOutput) Company() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Customer) *string { return v.Company }).(pulumi.StringPtrOutput)
}

func (o CustomerOutput) LicensedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Customer) *string { return v.LicensedTo }).(pulumi.StringPtrOutput)
}

func (o CustomerOutput) RegisteredEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Customer) *string { return v.RegisteredEmail }).(pulumi.StringPtrOutput)
}

type CustomerPtrOutput struct{ *pulumi.OutputState }

func (CustomerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Customer)(nil)).Elem()
}

func (o CustomerPtrOutput) ToCustomerPtrOutput() CustomerPtrOutput {
	return o
}

func (o CustomerPtrOutput) ToCustomerPtrOutputWithContext(ctx context.Context) CustomerPtrOutput {
	return o
}

func (o CustomerPtrOutput) Elem() CustomerOutput {
	return o.ApplyT(func(v *Customer) Customer {
		if v != nil {
			return *v
		}
		var ret Customer
		return ret
	}).(CustomerOutput)
}

func (o CustomerPtrOutput) Company() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Customer) *string {
		if v == nil {
			return nil
		}
		return v.Company
	}).(pulumi.StringPtrOutput)
}

func (o CustomerPtrOutput) LicensedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Customer) *string {
		if v == nil {
			return nil
		}
		return v.LicensedTo
	}).(pulumi.StringPtrOutput)
}

func (o CustomerPtrOutput) RegisteredEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Customer) *string {
		if v == nil {
			return nil
		}
		return v.RegisteredEmail
	}).(pulumi.StringPtrOutput)
}

type Order struct {
	OrderNumber  *string `pulumi:"orderNumber"`
	OrderTotal   *string `pulumi:"orderTotal"`
	PurchaseDate *string `pulumi:"purchaseDate"`
}

// OrderInput is an input type that accepts OrderArgs and OrderOutput values.
// You can construct a concrete instance of `OrderInput` via:
//
//	OrderArgs{...}
type OrderInput interface {
	pulumi.Input

	ToOrderOutput() OrderOutput
	ToOrderOutputWithContext(context.Context) OrderOutput
}

type OrderArgs struct {
	OrderNumber  pulumi.StringPtrInput `pulumi:"orderNumber"`
	OrderTotal   pulumi.StringPtrInput `pulumi:"orderTotal"`
	PurchaseDate pulumi.StringPtrInput `pulumi:"purchaseDate"`
}

func (OrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Order)(nil)).Elem()
}

func (i OrderArgs) ToOrderOutput() OrderOutput {
	return i.ToOrderOutputWithContext(context.Background())
}

func (i OrderArgs) ToOrderOutputWithContext(ctx context.Context) OrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderOutput)
}

func (i OrderArgs) ToOrderPtrOutput() OrderPtrOutput {
	return i.ToOrderPtrOutputWithContext(context.Background())
}

func (i OrderArgs) ToOrderPtrOutputWithContext(ctx context.Context) OrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderOutput).ToOrderPtrOutputWithContext(ctx)
}

// OrderPtrInput is an input type that accepts OrderArgs, OrderPtr and OrderPtrOutput values.
// You can construct a concrete instance of `OrderPtrInput` via:
//
//	        OrderArgs{...}
//
//	or:
//
//	        nil
type OrderPtrInput interface {
	pulumi.Input

	ToOrderPtrOutput() OrderPtrOutput
	ToOrderPtrOutputWithContext(context.Context) OrderPtrOutput
}

type orderPtrType OrderArgs

func OrderPtr(v *OrderArgs) OrderPtrInput {
	return (*orderPtrType)(v)
}

func (*orderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Order)(nil)).Elem()
}

func (i *orderPtrType) ToOrderPtrOutput() OrderPtrOutput {
	return i.ToOrderPtrOutputWithContext(context.Background())
}

func (i *orderPtrType) ToOrderPtrOutputWithContext(ctx context.Context) OrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderPtrOutput)
}

type OrderOutput struct{ *pulumi.OutputState }

func (OrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Order)(nil)).Elem()
}

func (o OrderOutput) ToOrderOutput() OrderOutput {
	return o
}

func (o OrderOutput) ToOrderOutputWithContext(ctx context.Context) OrderOutput {
	return o
}

func (o OrderOutput) ToOrderPtrOutput() OrderPtrOutput {
	return o.ToOrderPtrOutputWithContext(context.Background())
}

func (o OrderOutput) ToOrderPtrOutputWithContext(ctx context.Context) OrderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Order) *Order {
		return &v
	}).(OrderPtrOutput)
}

func (o OrderOutput) OrderNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Order) *string { return v.OrderNumber }).(pulumi.StringPtrOutput)
}

func (o OrderOutput) OrderTotal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Order) *string { return v.OrderTotal }).(pulumi.StringPtrOutput)
}

func (o OrderOutput) PurchaseDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Order) *string { return v.PurchaseDate }).(pulumi.StringPtrOutput)
}

type OrderPtrOutput struct{ *pulumi.OutputState }

func (OrderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Order)(nil)).Elem()
}

func (o OrderPtrOutput) ToOrderPtrOutput() OrderPtrOutput {
	return o
}

func (o OrderPtrOutput) ToOrderPtrOutputWithContext(ctx context.Context) OrderPtrOutput {
	return o
}

func (o OrderPtrOutput) Elem() OrderOutput {
	return o.ApplyT(func(v *Order) Order {
		if v != nil {
			return *v
		}
		var ret Order
		return ret
	}).(OrderOutput)
}

func (o OrderPtrOutput) OrderNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Order) *string {
		if v == nil {
			return nil
		}
		return v.OrderNumber
	}).(pulumi.StringPtrOutput)
}

func (o OrderPtrOutput) OrderTotal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Order) *string {
		if v == nil {
			return nil
		}
		return v.OrderTotal
	}).(pulumi.StringPtrOutput)
}

func (o OrderPtrOutput) PurchaseDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Order) *string {
		if v == nil {
			return nil
		}
		return v.PurchaseDate
	}).(pulumi.StringPtrOutput)
}

type Publisher struct {
	DownloadPage *string `pulumi:"downloadPage"`
	Publisher    *string `pulumi:"publisher"`
	RetailPrice  *string `pulumi:"retailPrice"`
	SupportEmail *string `pulumi:"supportEmail"`
	Website      *string `pulumi:"website"`
}

// PublisherInput is an input type that accepts PublisherArgs and PublisherOutput values.
// You can construct a concrete instance of `PublisherInput` via:
//
//	PublisherArgs{...}
type PublisherInput interface {
	pulumi.Input

	ToPublisherOutput() PublisherOutput
	ToPublisherOutputWithContext(context.Context) PublisherOutput
}

type PublisherArgs struct {
	DownloadPage pulumi.StringPtrInput `pulumi:"downloadPage"`
	Publisher    pulumi.StringPtrInput `pulumi:"publisher"`
	RetailPrice  pulumi.StringPtrInput `pulumi:"retailPrice"`
	SupportEmail pulumi.StringPtrInput `pulumi:"supportEmail"`
	Website      pulumi.StringPtrInput `pulumi:"website"`
}

func (PublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (i PublisherArgs) ToPublisherOutput() PublisherOutput {
	return i.ToPublisherOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput)
}

func (i PublisherArgs) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput).ToPublisherPtrOutputWithContext(ctx)
}

// PublisherPtrInput is an input type that accepts PublisherArgs, PublisherPtr and PublisherPtrOutput values.
// You can construct a concrete instance of `PublisherPtrInput` via:
//
//	        PublisherArgs{...}
//
//	or:
//
//	        nil
type PublisherPtrInput interface {
	pulumi.Input

	ToPublisherPtrOutput() PublisherPtrOutput
	ToPublisherPtrOutputWithContext(context.Context) PublisherPtrOutput
}

type publisherPtrType PublisherArgs

func PublisherPtr(v *PublisherArgs) PublisherPtrInput {
	return (*publisherPtrType)(v)
}

func (*publisherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (i *publisherPtrType) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i *publisherPtrType) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherPtrOutput)
}

type PublisherOutput struct{ *pulumi.OutputState }

func (PublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (o PublisherOutput) ToPublisherOutput() PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o.ToPublisherPtrOutputWithContext(context.Background())
}

func (o PublisherOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Publisher) *Publisher {
		return &v
	}).(PublisherPtrOutput)
}

func (o PublisherOutput) DownloadPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.DownloadPage }).(pulumi.StringPtrOutput)
}

func (o PublisherOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

func (o PublisherOutput) RetailPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.RetailPrice }).(pulumi.StringPtrOutput)
}

func (o PublisherOutput) SupportEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.SupportEmail }).(pulumi.StringPtrOutput)
}

func (o PublisherOutput) Website() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.Website }).(pulumi.StringPtrOutput)
}

type PublisherPtrOutput struct{ *pulumi.OutputState }

func (PublisherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (o PublisherPtrOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) Elem() PublisherOutput {
	return o.ApplyT(func(v *Publisher) Publisher {
		if v != nil {
			return *v
		}
		var ret Publisher
		return ret
	}).(PublisherOutput)
}

func (o PublisherPtrOutput) DownloadPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.DownloadPage
	}).(pulumi.StringPtrOutput)
}

func (o PublisherPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

func (o PublisherPtrOutput) RetailPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.RetailPrice
	}).(pulumi.StringPtrOutput)
}

func (o PublisherPtrOutput) SupportEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.SupportEmail
	}).(pulumi.StringPtrOutput)
}

func (o PublisherPtrOutput) Website() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.Website
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerInput)(nil)).Elem(), CustomerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerPtrInput)(nil)).Elem(), CustomerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderInput)(nil)).Elem(), OrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderPtrInput)(nil)).Elem(), OrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherPtrInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterOutputType(CustomerOutput{})
	pulumi.RegisterOutputType(CustomerPtrOutput{})
	pulumi.RegisterOutputType(OrderOutput{})
	pulumi.RegisterOutputType(OrderPtrOutput{})
	pulumi.RegisterOutputType(PublisherOutput{})
	pulumi.RegisterOutputType(PublisherPtrOutput{})
}
