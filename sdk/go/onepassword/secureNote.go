// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecureNote struct {
	pulumi.CustomResourceState

	Category pulumi.StringOutput    `pulumi:"category"`
	Fields   GetFieldArrayOutput    `pulumi:"fields"`
	Id       pulumi.StringOutput    `pulumi:"id"`
	Notes    pulumi.StringPtrOutput `pulumi:"notes"`
	Sections GetSectionArrayOutput  `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringOutput `pulumi:"title"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewSecureNote registers a new resource with the given unique name, arguments, and options.
func NewSecureNote(ctx *pulumi.Context,
	name string, args *SecureNoteArgs, opts ...pulumi.ResourceOption) (*SecureNote, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	var resource SecureNote
	err := ctx.RegisterResource("onepassword:index:SecureNote", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecureNote gets an existing SecureNote resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecureNote(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecureNoteState, opts ...pulumi.ResourceOption) (*SecureNote, error) {
	var resource SecureNote
	err := ctx.ReadResource("onepassword:index:SecureNote", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecureNote resources.
type secureNoteState struct {
}

type SecureNoteState struct {
}

func (SecureNoteState) ElementType() reflect.Type {
	return reflect.TypeOf((*secureNoteState)(nil)).Elem()
}

type secureNoteArgs struct {
	Fields   []Field   `pulumi:"fields"`
	Notes    *string   `pulumi:"notes"`
	Sections []Section `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title string `pulumi:"title"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// The set of arguments for constructing a SecureNote resource.
type SecureNoteArgs struct {
	Fields   FieldArrayInput
	Notes    pulumi.StringPtrInput
	Sections SectionArrayInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput
}

func (SecureNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secureNoteArgs)(nil)).Elem()
}

type SecureNoteInput interface {
	pulumi.Input

	ToSecureNoteOutput() SecureNoteOutput
	ToSecureNoteOutputWithContext(ctx context.Context) SecureNoteOutput
}

func (*SecureNote) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureNote)(nil)).Elem()
}

func (i *SecureNote) ToSecureNoteOutput() SecureNoteOutput {
	return i.ToSecureNoteOutputWithContext(context.Background())
}

func (i *SecureNote) ToSecureNoteOutputWithContext(ctx context.Context) SecureNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureNoteOutput)
}

// SecureNoteArrayInput is an input type that accepts SecureNoteArray and SecureNoteArrayOutput values.
// You can construct a concrete instance of `SecureNoteArrayInput` via:
//
//	SecureNoteArray{ SecureNoteArgs{...} }
type SecureNoteArrayInput interface {
	pulumi.Input

	ToSecureNoteArrayOutput() SecureNoteArrayOutput
	ToSecureNoteArrayOutputWithContext(context.Context) SecureNoteArrayOutput
}

type SecureNoteArray []SecureNoteInput

func (SecureNoteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecureNote)(nil)).Elem()
}

func (i SecureNoteArray) ToSecureNoteArrayOutput() SecureNoteArrayOutput {
	return i.ToSecureNoteArrayOutputWithContext(context.Background())
}

func (i SecureNoteArray) ToSecureNoteArrayOutputWithContext(ctx context.Context) SecureNoteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureNoteArrayOutput)
}

// SecureNoteMapInput is an input type that accepts SecureNoteMap and SecureNoteMapOutput values.
// You can construct a concrete instance of `SecureNoteMapInput` via:
//
//	SecureNoteMap{ "key": SecureNoteArgs{...} }
type SecureNoteMapInput interface {
	pulumi.Input

	ToSecureNoteMapOutput() SecureNoteMapOutput
	ToSecureNoteMapOutputWithContext(context.Context) SecureNoteMapOutput
}

type SecureNoteMap map[string]SecureNoteInput

func (SecureNoteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecureNote)(nil)).Elem()
}

func (i SecureNoteMap) ToSecureNoteMapOutput() SecureNoteMapOutput {
	return i.ToSecureNoteMapOutputWithContext(context.Background())
}

func (i SecureNoteMap) ToSecureNoteMapOutputWithContext(ctx context.Context) SecureNoteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureNoteMapOutput)
}

type SecureNoteOutput struct{ *pulumi.OutputState }

func (SecureNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureNote)(nil)).Elem()
}

func (o SecureNoteOutput) ToSecureNoteOutput() SecureNoteOutput {
	return o
}

func (o SecureNoteOutput) ToSecureNoteOutputWithContext(ctx context.Context) SecureNoteOutput {
	return o
}

type SecureNoteArrayOutput struct{ *pulumi.OutputState }

func (SecureNoteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecureNote)(nil)).Elem()
}

func (o SecureNoteArrayOutput) ToSecureNoteArrayOutput() SecureNoteArrayOutput {
	return o
}

func (o SecureNoteArrayOutput) ToSecureNoteArrayOutputWithContext(ctx context.Context) SecureNoteArrayOutput {
	return o
}

func (o SecureNoteArrayOutput) Index(i pulumi.IntInput) SecureNoteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecureNote {
		return vs[0].([]*SecureNote)[vs[1].(int)]
	}).(SecureNoteOutput)
}

type SecureNoteMapOutput struct{ *pulumi.OutputState }

func (SecureNoteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecureNote)(nil)).Elem()
}

func (o SecureNoteMapOutput) ToSecureNoteMapOutput() SecureNoteMapOutput {
	return o
}

func (o SecureNoteMapOutput) ToSecureNoteMapOutputWithContext(ctx context.Context) SecureNoteMapOutput {
	return o
}

func (o SecureNoteMapOutput) MapIndex(k pulumi.StringInput) SecureNoteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecureNote {
		return vs[0].(map[string]*SecureNote)[vs[1].(string)]
	}).(SecureNoteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecureNoteInput)(nil)).Elem(), &SecureNote{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecureNoteArrayInput)(nil)).Elem(), SecureNoteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecureNoteMapInput)(nil)).Elem(), SecureNoteMap{})
	pulumi.RegisterOutputType(SecureNoteOutput{})
	pulumi.RegisterOutputType(SecureNoteArrayOutput{})
	pulumi.RegisterOutputType(SecureNoteMapOutput{})
}
