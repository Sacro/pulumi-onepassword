// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-onepassword/sdk/go/onepassword/emailaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EmailAccount struct {
	pulumi.CustomResourceState

	AuthMethod         pulumi.StringPtrOutput                   `pulumi:"authMethod"`
	Category           pulumi.StringOutput                      `pulumi:"category"`
	ContactInformation emailaccount.ContactInformationPtrOutput `pulumi:"contactInformation"`
	Fields             GetFieldArrayOutput                      `pulumi:"fields"`
	Id                 pulumi.StringOutput                      `pulumi:"id"`
	Notes              pulumi.StringPtrOutput                   `pulumi:"notes"`
	Password           pulumi.StringPtrOutput                   `pulumi:"password"`
	PortNumber         pulumi.StringPtrOutput                   `pulumi:"portNumber"`
	Sections           GetSectionArrayOutput                    `pulumi:"sections"`
	Security           pulumi.StringPtrOutput                   `pulumi:"security"`
	Server             pulumi.StringPtrOutput                   `pulumi:"server"`
	Smtp               emailaccount.SmtpPtrOutput               `pulumi:"smtp"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title    pulumi.StringOutput    `pulumi:"title"`
	Type     pulumi.StringPtrOutput `pulumi:"type"`
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewEmailAccount registers a new resource with the given unique name, arguments, and options.
func NewEmailAccount(ctx *pulumi.Context,
	name string, args *EmailAccountArgs, opts ...pulumi.ResourceOption) (*EmailAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	if isZero(args.Category) {
		args.Category = pulumi.String("Item")
	}
	var resource EmailAccount
	err := ctx.RegisterResource("onepassword:index:EmailAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailAccount gets an existing EmailAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailAccountState, opts ...pulumi.ResourceOption) (*EmailAccount, error) {
	var resource EmailAccount
	err := ctx.ReadResource("onepassword:index:EmailAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailAccount resources.
type emailAccountState struct {
}

type EmailAccountState struct {
}

func (EmailAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailAccountState)(nil)).Elem()
}

type emailAccountArgs struct {
	AuthMethod         *string                          `pulumi:"authMethod"`
	Category           string                           `pulumi:"category"`
	ContactInformation *emailaccount.ContactInformation `pulumi:"contactInformation"`
	Fields             []Field                          `pulumi:"fields"`
	Notes              *string                          `pulumi:"notes"`
	Password           *string                          `pulumi:"password"`
	PortNumber         *string                          `pulumi:"portNumber"`
	Sections           []Section                        `pulumi:"sections"`
	Security           *string                          `pulumi:"security"`
	Server             *string                          `pulumi:"server"`
	Smtp               *emailaccount.Smtp               `pulumi:"smtp"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title    string  `pulumi:"title"`
	Type     *string `pulumi:"type"`
	Username *string `pulumi:"username"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// The set of arguments for constructing a EmailAccount resource.
type EmailAccountArgs struct {
	AuthMethod         pulumi.StringPtrInput
	Category           pulumi.StringInput
	ContactInformation emailaccount.ContactInformationPtrInput
	Fields             FieldArrayInput
	Notes              pulumi.StringPtrInput
	Password           pulumi.StringPtrInput
	PortNumber         pulumi.StringPtrInput
	Sections           SectionArrayInput
	Security           pulumi.StringPtrInput
	Server             pulumi.StringPtrInput
	Smtp               emailaccount.SmtpPtrInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title    pulumi.StringInput
	Type     pulumi.StringPtrInput
	Username pulumi.StringPtrInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput
}

func (EmailAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailAccountArgs)(nil)).Elem()
}

type EmailAccountInput interface {
	pulumi.Input

	ToEmailAccountOutput() EmailAccountOutput
	ToEmailAccountOutputWithContext(ctx context.Context) EmailAccountOutput
}

func (*EmailAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailAccount)(nil)).Elem()
}

func (i *EmailAccount) ToEmailAccountOutput() EmailAccountOutput {
	return i.ToEmailAccountOutputWithContext(context.Background())
}

func (i *EmailAccount) ToEmailAccountOutputWithContext(ctx context.Context) EmailAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailAccountOutput)
}

// EmailAccountArrayInput is an input type that accepts EmailAccountArray and EmailAccountArrayOutput values.
// You can construct a concrete instance of `EmailAccountArrayInput` via:
//
//	EmailAccountArray{ EmailAccountArgs{...} }
type EmailAccountArrayInput interface {
	pulumi.Input

	ToEmailAccountArrayOutput() EmailAccountArrayOutput
	ToEmailAccountArrayOutputWithContext(context.Context) EmailAccountArrayOutput
}

type EmailAccountArray []EmailAccountInput

func (EmailAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailAccount)(nil)).Elem()
}

func (i EmailAccountArray) ToEmailAccountArrayOutput() EmailAccountArrayOutput {
	return i.ToEmailAccountArrayOutputWithContext(context.Background())
}

func (i EmailAccountArray) ToEmailAccountArrayOutputWithContext(ctx context.Context) EmailAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailAccountArrayOutput)
}

// EmailAccountMapInput is an input type that accepts EmailAccountMap and EmailAccountMapOutput values.
// You can construct a concrete instance of `EmailAccountMapInput` via:
//
//	EmailAccountMap{ "key": EmailAccountArgs{...} }
type EmailAccountMapInput interface {
	pulumi.Input

	ToEmailAccountMapOutput() EmailAccountMapOutput
	ToEmailAccountMapOutputWithContext(context.Context) EmailAccountMapOutput
}

type EmailAccountMap map[string]EmailAccountInput

func (EmailAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailAccount)(nil)).Elem()
}

func (i EmailAccountMap) ToEmailAccountMapOutput() EmailAccountMapOutput {
	return i.ToEmailAccountMapOutputWithContext(context.Background())
}

func (i EmailAccountMap) ToEmailAccountMapOutputWithContext(ctx context.Context) EmailAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailAccountMapOutput)
}

type EmailAccountOutput struct{ *pulumi.OutputState }

func (EmailAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailAccount)(nil)).Elem()
}

func (o EmailAccountOutput) ToEmailAccountOutput() EmailAccountOutput {
	return o
}

func (o EmailAccountOutput) ToEmailAccountOutputWithContext(ctx context.Context) EmailAccountOutput {
	return o
}

type EmailAccountArrayOutput struct{ *pulumi.OutputState }

func (EmailAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailAccount)(nil)).Elem()
}

func (o EmailAccountArrayOutput) ToEmailAccountArrayOutput() EmailAccountArrayOutput {
	return o
}

func (o EmailAccountArrayOutput) ToEmailAccountArrayOutputWithContext(ctx context.Context) EmailAccountArrayOutput {
	return o
}

func (o EmailAccountArrayOutput) Index(i pulumi.IntInput) EmailAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailAccount {
		return vs[0].([]*EmailAccount)[vs[1].(int)]
	}).(EmailAccountOutput)
}

type EmailAccountMapOutput struct{ *pulumi.OutputState }

func (EmailAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailAccount)(nil)).Elem()
}

func (o EmailAccountMapOutput) ToEmailAccountMapOutput() EmailAccountMapOutput {
	return o
}

func (o EmailAccountMapOutput) ToEmailAccountMapOutputWithContext(ctx context.Context) EmailAccountMapOutput {
	return o
}

func (o EmailAccountMapOutput) MapIndex(k pulumi.StringInput) EmailAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailAccount {
		return vs[0].(map[string]*EmailAccount)[vs[1].(string)]
	}).(EmailAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailAccountInput)(nil)).Elem(), &EmailAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailAccountArrayInput)(nil)).Elem(), EmailAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailAccountMapInput)(nil)).Elem(), EmailAccountMap{})
	pulumi.RegisterOutputType(EmailAccountOutput{})
	pulumi.RegisterOutputType(EmailAccountArrayOutput{})
	pulumi.RegisterOutputType(EmailAccountMapOutput{})
}
