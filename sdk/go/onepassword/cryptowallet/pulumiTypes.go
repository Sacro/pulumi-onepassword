// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cryptowallet

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Wallet struct {
	WalletAddress *string `pulumi:"walletAddress"`
}

// WalletInput is an input type that accepts WalletArgs and WalletOutput values.
// You can construct a concrete instance of `WalletInput` via:
//
//	WalletArgs{...}
type WalletInput interface {
	pulumi.Input

	ToWalletOutput() WalletOutput
	ToWalletOutputWithContext(context.Context) WalletOutput
}

type WalletArgs struct {
	WalletAddress pulumi.StringPtrInput `pulumi:"walletAddress"`
}

func (WalletArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Wallet)(nil)).Elem()
}

func (i WalletArgs) ToWalletOutput() WalletOutput {
	return i.ToWalletOutputWithContext(context.Background())
}

func (i WalletArgs) ToWalletOutputWithContext(ctx context.Context) WalletOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WalletOutput)
}

func (i WalletArgs) ToWalletPtrOutput() WalletPtrOutput {
	return i.ToWalletPtrOutputWithContext(context.Background())
}

func (i WalletArgs) ToWalletPtrOutputWithContext(ctx context.Context) WalletPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WalletOutput).ToWalletPtrOutputWithContext(ctx)
}

// WalletPtrInput is an input type that accepts WalletArgs, WalletPtr and WalletPtrOutput values.
// You can construct a concrete instance of `WalletPtrInput` via:
//
//	        WalletArgs{...}
//
//	or:
//
//	        nil
type WalletPtrInput interface {
	pulumi.Input

	ToWalletPtrOutput() WalletPtrOutput
	ToWalletPtrOutputWithContext(context.Context) WalletPtrOutput
}

type walletPtrType WalletArgs

func WalletPtr(v *WalletArgs) WalletPtrInput {
	return (*walletPtrType)(v)
}

func (*walletPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Wallet)(nil)).Elem()
}

func (i *walletPtrType) ToWalletPtrOutput() WalletPtrOutput {
	return i.ToWalletPtrOutputWithContext(context.Background())
}

func (i *walletPtrType) ToWalletPtrOutputWithContext(ctx context.Context) WalletPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WalletPtrOutput)
}

type WalletOutput struct{ *pulumi.OutputState }

func (WalletOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Wallet)(nil)).Elem()
}

func (o WalletOutput) ToWalletOutput() WalletOutput {
	return o
}

func (o WalletOutput) ToWalletOutputWithContext(ctx context.Context) WalletOutput {
	return o
}

func (o WalletOutput) ToWalletPtrOutput() WalletPtrOutput {
	return o.ToWalletPtrOutputWithContext(context.Background())
}

func (o WalletOutput) ToWalletPtrOutputWithContext(ctx context.Context) WalletPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Wallet) *Wallet {
		return &v
	}).(WalletPtrOutput)
}

func (o WalletOutput) WalletAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Wallet) *string { return v.WalletAddress }).(pulumi.StringPtrOutput)
}

type WalletPtrOutput struct{ *pulumi.OutputState }

func (WalletPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Wallet)(nil)).Elem()
}

func (o WalletPtrOutput) ToWalletPtrOutput() WalletPtrOutput {
	return o
}

func (o WalletPtrOutput) ToWalletPtrOutputWithContext(ctx context.Context) WalletPtrOutput {
	return o
}

func (o WalletPtrOutput) Elem() WalletOutput {
	return o.ApplyT(func(v *Wallet) Wallet {
		if v != nil {
			return *v
		}
		var ret Wallet
		return ret
	}).(WalletOutput)
}

func (o WalletPtrOutput) WalletAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wallet) *string {
		if v == nil {
			return nil
		}
		return v.WalletAddress
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WalletInput)(nil)).Elem(), WalletArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WalletPtrInput)(nil)).Elem(), WalletArgs{})
	pulumi.RegisterOutputType(WalletOutput{})
	pulumi.RegisterOutputType(WalletPtrOutput{})
}
