// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OutdoorLicense struct {
	pulumi.CustomResourceState

	ApprovedWildlife pulumi.StringPtrOutput `pulumi:"approvedWildlife"`
	Category         pulumi.StringOutput    `pulumi:"category"`
	Country          pulumi.StringPtrOutput `pulumi:"country"`
	Expires          pulumi.StringPtrOutput `pulumi:"expires"`
	Fields           GetFieldArrayOutput    `pulumi:"fields"`
	FullName         pulumi.StringPtrOutput `pulumi:"fullName"`
	Id               pulumi.StringOutput    `pulumi:"id"`
	MaximumQuota     pulumi.StringPtrOutput `pulumi:"maximumQuota"`
	Notes            pulumi.StringPtrOutput `pulumi:"notes"`
	Sections         GetSectionArrayOutput  `pulumi:"sections"`
	State            pulumi.StringPtrOutput `pulumi:"state"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringOutput `pulumi:"title"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid      pulumi.StringOutput    `pulumi:"uuid"`
	ValidFrom pulumi.StringPtrOutput `pulumi:"validFrom"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewOutdoorLicense registers a new resource with the given unique name, arguments, and options.
func NewOutdoorLicense(ctx *pulumi.Context,
	name string, args *OutdoorLicenseArgs, opts ...pulumi.ResourceOption) (*OutdoorLicense, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	if isZero(args.Category) {
		args.Category = pulumi.String("Item")
	}
	var resource OutdoorLicense
	err := ctx.RegisterResource("onepassword:index:OutdoorLicense", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutdoorLicense gets an existing OutdoorLicense resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutdoorLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutdoorLicenseState, opts ...pulumi.ResourceOption) (*OutdoorLicense, error) {
	var resource OutdoorLicense
	err := ctx.ReadResource("onepassword:index:OutdoorLicense", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutdoorLicense resources.
type outdoorLicenseState struct {
}

type OutdoorLicenseState struct {
}

func (OutdoorLicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*outdoorLicenseState)(nil)).Elem()
}

type outdoorLicenseArgs struct {
	ApprovedWildlife *string   `pulumi:"approvedWildlife"`
	Category         string    `pulumi:"category"`
	Country          *string   `pulumi:"country"`
	Expires          *string   `pulumi:"expires"`
	Fields           []Field   `pulumi:"fields"`
	FullName         *string   `pulumi:"fullName"`
	MaximumQuota     *string   `pulumi:"maximumQuota"`
	Notes            *string   `pulumi:"notes"`
	Sections         []Section `pulumi:"sections"`
	State            *string   `pulumi:"state"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title     string  `pulumi:"title"`
	ValidFrom *string `pulumi:"validFrom"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// The set of arguments for constructing a OutdoorLicense resource.
type OutdoorLicenseArgs struct {
	ApprovedWildlife pulumi.StringPtrInput
	Category         pulumi.StringInput
	Country          pulumi.StringPtrInput
	Expires          pulumi.StringPtrInput
	Fields           FieldArrayInput
	FullName         pulumi.StringPtrInput
	MaximumQuota     pulumi.StringPtrInput
	Notes            pulumi.StringPtrInput
	Sections         SectionArrayInput
	State            pulumi.StringPtrInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title     pulumi.StringInput
	ValidFrom pulumi.StringPtrInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput
}

func (OutdoorLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outdoorLicenseArgs)(nil)).Elem()
}

type OutdoorLicenseInput interface {
	pulumi.Input

	ToOutdoorLicenseOutput() OutdoorLicenseOutput
	ToOutdoorLicenseOutputWithContext(ctx context.Context) OutdoorLicenseOutput
}

func (*OutdoorLicense) ElementType() reflect.Type {
	return reflect.TypeOf((**OutdoorLicense)(nil)).Elem()
}

func (i *OutdoorLicense) ToOutdoorLicenseOutput() OutdoorLicenseOutput {
	return i.ToOutdoorLicenseOutputWithContext(context.Background())
}

func (i *OutdoorLicense) ToOutdoorLicenseOutputWithContext(ctx context.Context) OutdoorLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutdoorLicenseOutput)
}

// OutdoorLicenseArrayInput is an input type that accepts OutdoorLicenseArray and OutdoorLicenseArrayOutput values.
// You can construct a concrete instance of `OutdoorLicenseArrayInput` via:
//
//	OutdoorLicenseArray{ OutdoorLicenseArgs{...} }
type OutdoorLicenseArrayInput interface {
	pulumi.Input

	ToOutdoorLicenseArrayOutput() OutdoorLicenseArrayOutput
	ToOutdoorLicenseArrayOutputWithContext(context.Context) OutdoorLicenseArrayOutput
}

type OutdoorLicenseArray []OutdoorLicenseInput

func (OutdoorLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutdoorLicense)(nil)).Elem()
}

func (i OutdoorLicenseArray) ToOutdoorLicenseArrayOutput() OutdoorLicenseArrayOutput {
	return i.ToOutdoorLicenseArrayOutputWithContext(context.Background())
}

func (i OutdoorLicenseArray) ToOutdoorLicenseArrayOutputWithContext(ctx context.Context) OutdoorLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutdoorLicenseArrayOutput)
}

// OutdoorLicenseMapInput is an input type that accepts OutdoorLicenseMap and OutdoorLicenseMapOutput values.
// You can construct a concrete instance of `OutdoorLicenseMapInput` via:
//
//	OutdoorLicenseMap{ "key": OutdoorLicenseArgs{...} }
type OutdoorLicenseMapInput interface {
	pulumi.Input

	ToOutdoorLicenseMapOutput() OutdoorLicenseMapOutput
	ToOutdoorLicenseMapOutputWithContext(context.Context) OutdoorLicenseMapOutput
}

type OutdoorLicenseMap map[string]OutdoorLicenseInput

func (OutdoorLicenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutdoorLicense)(nil)).Elem()
}

func (i OutdoorLicenseMap) ToOutdoorLicenseMapOutput() OutdoorLicenseMapOutput {
	return i.ToOutdoorLicenseMapOutputWithContext(context.Background())
}

func (i OutdoorLicenseMap) ToOutdoorLicenseMapOutputWithContext(ctx context.Context) OutdoorLicenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutdoorLicenseMapOutput)
}

type OutdoorLicenseOutput struct{ *pulumi.OutputState }

func (OutdoorLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutdoorLicense)(nil)).Elem()
}

func (o OutdoorLicenseOutput) ToOutdoorLicenseOutput() OutdoorLicenseOutput {
	return o
}

func (o OutdoorLicenseOutput) ToOutdoorLicenseOutputWithContext(ctx context.Context) OutdoorLicenseOutput {
	return o
}

type OutdoorLicenseArrayOutput struct{ *pulumi.OutputState }

func (OutdoorLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutdoorLicense)(nil)).Elem()
}

func (o OutdoorLicenseArrayOutput) ToOutdoorLicenseArrayOutput() OutdoorLicenseArrayOutput {
	return o
}

func (o OutdoorLicenseArrayOutput) ToOutdoorLicenseArrayOutputWithContext(ctx context.Context) OutdoorLicenseArrayOutput {
	return o
}

func (o OutdoorLicenseArrayOutput) Index(i pulumi.IntInput) OutdoorLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OutdoorLicense {
		return vs[0].([]*OutdoorLicense)[vs[1].(int)]
	}).(OutdoorLicenseOutput)
}

type OutdoorLicenseMapOutput struct{ *pulumi.OutputState }

func (OutdoorLicenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutdoorLicense)(nil)).Elem()
}

func (o OutdoorLicenseMapOutput) ToOutdoorLicenseMapOutput() OutdoorLicenseMapOutput {
	return o
}

func (o OutdoorLicenseMapOutput) ToOutdoorLicenseMapOutputWithContext(ctx context.Context) OutdoorLicenseMapOutput {
	return o
}

func (o OutdoorLicenseMapOutput) MapIndex(k pulumi.StringInput) OutdoorLicenseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OutdoorLicense {
		return vs[0].(map[string]*OutdoorLicense)[vs[1].(string)]
	}).(OutdoorLicenseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OutdoorLicenseInput)(nil)).Elem(), &OutdoorLicense{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutdoorLicenseArrayInput)(nil)).Elem(), OutdoorLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutdoorLicenseMapInput)(nil)).Elem(), OutdoorLicenseMap{})
	pulumi.RegisterOutputType(OutdoorLicenseOutput{})
	pulumi.RegisterOutputType(OutdoorLicenseArrayOutput{})
	pulumi.RegisterOutputType(OutdoorLicenseMapOutput{})
}
