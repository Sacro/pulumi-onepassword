// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WirelessRouter struct {
	pulumi.CustomResourceState

	AirPortId               pulumi.StringPtrOutput `pulumi:"airPortId"`
	AttachedStoragePassword pulumi.StringPtrOutput `pulumi:"attachedStoragePassword"`
	BaseStationName         pulumi.StringPtrOutput `pulumi:"baseStationName"`
	BaseStationPassword     pulumi.StringPtrOutput `pulumi:"baseStationPassword"`
	Category                pulumi.StringOutput    `pulumi:"category"`
	Fields                  GetFieldArrayOutput    `pulumi:"fields"`
	Id                      pulumi.StringOutput    `pulumi:"id"`
	NetworkName             pulumi.StringPtrOutput `pulumi:"networkName"`
	Notes                   pulumi.StringPtrOutput `pulumi:"notes"`
	Sections                GetSectionArrayOutput  `pulumi:"sections"`
	ServerIpAddress         pulumi.StringPtrOutput `pulumi:"serverIpAddress"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringOutput `pulumi:"title"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault                   pulumi.StringOutput    `pulumi:"vault"`
	WirelessNetworkPassword pulumi.StringPtrOutput `pulumi:"wirelessNetworkPassword"`
	WirelessSecurity        pulumi.StringPtrOutput `pulumi:"wirelessSecurity"`
}

// NewWirelessRouter registers a new resource with the given unique name, arguments, and options.
func NewWirelessRouter(ctx *pulumi.Context,
	name string, args *WirelessRouterArgs, opts ...pulumi.ResourceOption) (*WirelessRouter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	if isZero(args.Category) {
		args.Category = pulumi.String("Item")
	}
	var resource WirelessRouter
	err := ctx.RegisterResource("onepassword:index:WirelessRouter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessRouter gets an existing WirelessRouter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessRouter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessRouterState, opts ...pulumi.ResourceOption) (*WirelessRouter, error) {
	var resource WirelessRouter
	err := ctx.ReadResource("onepassword:index:WirelessRouter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessRouter resources.
type wirelessRouterState struct {
}

type WirelessRouterState struct {
}

func (WirelessRouterState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessRouterState)(nil)).Elem()
}

type wirelessRouterArgs struct {
	AirPortId               *string   `pulumi:"airPortId"`
	AttachedStoragePassword *string   `pulumi:"attachedStoragePassword"`
	BaseStationName         *string   `pulumi:"baseStationName"`
	BaseStationPassword     *string   `pulumi:"baseStationPassword"`
	Category                string    `pulumi:"category"`
	Fields                  []Field   `pulumi:"fields"`
	NetworkName             *string   `pulumi:"networkName"`
	Notes                   *string   `pulumi:"notes"`
	Sections                []Section `pulumi:"sections"`
	ServerIpAddress         *string   `pulumi:"serverIpAddress"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title string `pulumi:"title"`
	// The UUID of the vault the item is in.
	Vault                   string  `pulumi:"vault"`
	WirelessNetworkPassword *string `pulumi:"wirelessNetworkPassword"`
	WirelessSecurity        *string `pulumi:"wirelessSecurity"`
}

// The set of arguments for constructing a WirelessRouter resource.
type WirelessRouterArgs struct {
	AirPortId               pulumi.StringPtrInput
	AttachedStoragePassword pulumi.StringPtrInput
	BaseStationName         pulumi.StringPtrInput
	BaseStationPassword     pulumi.StringPtrInput
	Category                pulumi.StringInput
	Fields                  FieldArrayInput
	NetworkName             pulumi.StringPtrInput
	Notes                   pulumi.StringPtrInput
	Sections                SectionArrayInput
	ServerIpAddress         pulumi.StringPtrInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringInput
	// The UUID of the vault the item is in.
	Vault                   pulumi.StringInput
	WirelessNetworkPassword pulumi.StringPtrInput
	WirelessSecurity        pulumi.StringPtrInput
}

func (WirelessRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessRouterArgs)(nil)).Elem()
}

type WirelessRouterInput interface {
	pulumi.Input

	ToWirelessRouterOutput() WirelessRouterOutput
	ToWirelessRouterOutputWithContext(ctx context.Context) WirelessRouterOutput
}

func (*WirelessRouter) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessRouter)(nil)).Elem()
}

func (i *WirelessRouter) ToWirelessRouterOutput() WirelessRouterOutput {
	return i.ToWirelessRouterOutputWithContext(context.Background())
}

func (i *WirelessRouter) ToWirelessRouterOutputWithContext(ctx context.Context) WirelessRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessRouterOutput)
}

// WirelessRouterArrayInput is an input type that accepts WirelessRouterArray and WirelessRouterArrayOutput values.
// You can construct a concrete instance of `WirelessRouterArrayInput` via:
//
//	WirelessRouterArray{ WirelessRouterArgs{...} }
type WirelessRouterArrayInput interface {
	pulumi.Input

	ToWirelessRouterArrayOutput() WirelessRouterArrayOutput
	ToWirelessRouterArrayOutputWithContext(context.Context) WirelessRouterArrayOutput
}

type WirelessRouterArray []WirelessRouterInput

func (WirelessRouterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessRouter)(nil)).Elem()
}

func (i WirelessRouterArray) ToWirelessRouterArrayOutput() WirelessRouterArrayOutput {
	return i.ToWirelessRouterArrayOutputWithContext(context.Background())
}

func (i WirelessRouterArray) ToWirelessRouterArrayOutputWithContext(ctx context.Context) WirelessRouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessRouterArrayOutput)
}

// WirelessRouterMapInput is an input type that accepts WirelessRouterMap and WirelessRouterMapOutput values.
// You can construct a concrete instance of `WirelessRouterMapInput` via:
//
//	WirelessRouterMap{ "key": WirelessRouterArgs{...} }
type WirelessRouterMapInput interface {
	pulumi.Input

	ToWirelessRouterMapOutput() WirelessRouterMapOutput
	ToWirelessRouterMapOutputWithContext(context.Context) WirelessRouterMapOutput
}

type WirelessRouterMap map[string]WirelessRouterInput

func (WirelessRouterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessRouter)(nil)).Elem()
}

func (i WirelessRouterMap) ToWirelessRouterMapOutput() WirelessRouterMapOutput {
	return i.ToWirelessRouterMapOutputWithContext(context.Background())
}

func (i WirelessRouterMap) ToWirelessRouterMapOutputWithContext(ctx context.Context) WirelessRouterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessRouterMapOutput)
}

type WirelessRouterOutput struct{ *pulumi.OutputState }

func (WirelessRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessRouter)(nil)).Elem()
}

func (o WirelessRouterOutput) ToWirelessRouterOutput() WirelessRouterOutput {
	return o
}

func (o WirelessRouterOutput) ToWirelessRouterOutputWithContext(ctx context.Context) WirelessRouterOutput {
	return o
}

type WirelessRouterArrayOutput struct{ *pulumi.OutputState }

func (WirelessRouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessRouter)(nil)).Elem()
}

func (o WirelessRouterArrayOutput) ToWirelessRouterArrayOutput() WirelessRouterArrayOutput {
	return o
}

func (o WirelessRouterArrayOutput) ToWirelessRouterArrayOutputWithContext(ctx context.Context) WirelessRouterArrayOutput {
	return o
}

func (o WirelessRouterArrayOutput) Index(i pulumi.IntInput) WirelessRouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessRouter {
		return vs[0].([]*WirelessRouter)[vs[1].(int)]
	}).(WirelessRouterOutput)
}

type WirelessRouterMapOutput struct{ *pulumi.OutputState }

func (WirelessRouterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessRouter)(nil)).Elem()
}

func (o WirelessRouterMapOutput) ToWirelessRouterMapOutput() WirelessRouterMapOutput {
	return o
}

func (o WirelessRouterMapOutput) ToWirelessRouterMapOutputWithContext(ctx context.Context) WirelessRouterMapOutput {
	return o
}

func (o WirelessRouterMapOutput) MapIndex(k pulumi.StringInput) WirelessRouterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessRouter {
		return vs[0].(map[string]*WirelessRouter)[vs[1].(string)]
	}).(WirelessRouterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessRouterInput)(nil)).Elem(), &WirelessRouter{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessRouterArrayInput)(nil)).Elem(), WirelessRouterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessRouterMapInput)(nil)).Elem(), WirelessRouterMap{})
	pulumi.RegisterOutputType(WirelessRouterOutput{})
	pulumi.RegisterOutputType(WirelessRouterArrayOutput{})
	pulumi.RegisterOutputType(WirelessRouterMapOutput{})
}
