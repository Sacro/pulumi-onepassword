// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Passport struct {
	pulumi.CustomResourceState

	Category         pulumi.StringOutput    `pulumi:"category"`
	DateOfBirth      pulumi.StringPtrOutput `pulumi:"dateOfBirth"`
	ExpiryDate       pulumi.StringPtrOutput `pulumi:"expiryDate"`
	Fields           GetFieldArrayOutput    `pulumi:"fields"`
	FullName         pulumi.StringPtrOutput `pulumi:"fullName"`
	Gender           pulumi.StringPtrOutput `pulumi:"gender"`
	Id               pulumi.StringOutput    `pulumi:"id"`
	IssuedOn         pulumi.StringPtrOutput `pulumi:"issuedOn"`
	IssuingAuthority pulumi.StringPtrOutput `pulumi:"issuingAuthority"`
	IssuingCountry   pulumi.StringPtrOutput `pulumi:"issuingCountry"`
	Nationality      pulumi.StringPtrOutput `pulumi:"nationality"`
	Notes            pulumi.StringPtrOutput `pulumi:"notes"`
	Number           pulumi.StringPtrOutput `pulumi:"number"`
	PlaceOfBirth     pulumi.StringPtrOutput `pulumi:"placeOfBirth"`
	Sections         GetSectionArrayOutput  `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringOutput    `pulumi:"title"`
	Type  pulumi.StringPtrOutput `pulumi:"type"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewPassport registers a new resource with the given unique name, arguments, and options.
func NewPassport(ctx *pulumi.Context,
	name string, args *PassportArgs, opts ...pulumi.ResourceOption) (*Passport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	var resource Passport
	err := ctx.RegisterResource("onepassword:index:Passport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPassport gets an existing Passport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPassport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PassportState, opts ...pulumi.ResourceOption) (*Passport, error) {
	var resource Passport
	err := ctx.ReadResource("onepassword:index:Passport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Passport resources.
type passportState struct {
}

type PassportState struct {
}

func (PassportState) ElementType() reflect.Type {
	return reflect.TypeOf((*passportState)(nil)).Elem()
}

type passportArgs struct {
	DateOfBirth      *string   `pulumi:"dateOfBirth"`
	ExpiryDate       *string   `pulumi:"expiryDate"`
	Fields           []Field   `pulumi:"fields"`
	FullName         *string   `pulumi:"fullName"`
	Gender           *string   `pulumi:"gender"`
	IssuedOn         *string   `pulumi:"issuedOn"`
	IssuingAuthority *string   `pulumi:"issuingAuthority"`
	IssuingCountry   *string   `pulumi:"issuingCountry"`
	Nationality      *string   `pulumi:"nationality"`
	Notes            *string   `pulumi:"notes"`
	Number           *string   `pulumi:"number"`
	PlaceOfBirth     *string   `pulumi:"placeOfBirth"`
	Sections         []Section `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title string  `pulumi:"title"`
	Type  *string `pulumi:"type"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// The set of arguments for constructing a Passport resource.
type PassportArgs struct {
	DateOfBirth      pulumi.StringPtrInput
	ExpiryDate       pulumi.StringPtrInput
	Fields           FieldArrayInput
	FullName         pulumi.StringPtrInput
	Gender           pulumi.StringPtrInput
	IssuedOn         pulumi.StringPtrInput
	IssuingAuthority pulumi.StringPtrInput
	IssuingCountry   pulumi.StringPtrInput
	Nationality      pulumi.StringPtrInput
	Notes            pulumi.StringPtrInput
	Number           pulumi.StringPtrInput
	PlaceOfBirth     pulumi.StringPtrInput
	Sections         SectionArrayInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringInput
	Type  pulumi.StringPtrInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput
}

func (PassportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passportArgs)(nil)).Elem()
}

type PassportInput interface {
	pulumi.Input

	ToPassportOutput() PassportOutput
	ToPassportOutputWithContext(ctx context.Context) PassportOutput
}

func (*Passport) ElementType() reflect.Type {
	return reflect.TypeOf((**Passport)(nil)).Elem()
}

func (i *Passport) ToPassportOutput() PassportOutput {
	return i.ToPassportOutputWithContext(context.Background())
}

func (i *Passport) ToPassportOutputWithContext(ctx context.Context) PassportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PassportOutput)
}

// PassportArrayInput is an input type that accepts PassportArray and PassportArrayOutput values.
// You can construct a concrete instance of `PassportArrayInput` via:
//
//	PassportArray{ PassportArgs{...} }
type PassportArrayInput interface {
	pulumi.Input

	ToPassportArrayOutput() PassportArrayOutput
	ToPassportArrayOutputWithContext(context.Context) PassportArrayOutput
}

type PassportArray []PassportInput

func (PassportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Passport)(nil)).Elem()
}

func (i PassportArray) ToPassportArrayOutput() PassportArrayOutput {
	return i.ToPassportArrayOutputWithContext(context.Background())
}

func (i PassportArray) ToPassportArrayOutputWithContext(ctx context.Context) PassportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PassportArrayOutput)
}

// PassportMapInput is an input type that accepts PassportMap and PassportMapOutput values.
// You can construct a concrete instance of `PassportMapInput` via:
//
//	PassportMap{ "key": PassportArgs{...} }
type PassportMapInput interface {
	pulumi.Input

	ToPassportMapOutput() PassportMapOutput
	ToPassportMapOutputWithContext(context.Context) PassportMapOutput
}

type PassportMap map[string]PassportInput

func (PassportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Passport)(nil)).Elem()
}

func (i PassportMap) ToPassportMapOutput() PassportMapOutput {
	return i.ToPassportMapOutputWithContext(context.Background())
}

func (i PassportMap) ToPassportMapOutputWithContext(ctx context.Context) PassportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PassportMapOutput)
}

type PassportOutput struct{ *pulumi.OutputState }

func (PassportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Passport)(nil)).Elem()
}

func (o PassportOutput) ToPassportOutput() PassportOutput {
	return o
}

func (o PassportOutput) ToPassportOutputWithContext(ctx context.Context) PassportOutput {
	return o
}

type PassportArrayOutput struct{ *pulumi.OutputState }

func (PassportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Passport)(nil)).Elem()
}

func (o PassportArrayOutput) ToPassportArrayOutput() PassportArrayOutput {
	return o
}

func (o PassportArrayOutput) ToPassportArrayOutputWithContext(ctx context.Context) PassportArrayOutput {
	return o
}

func (o PassportArrayOutput) Index(i pulumi.IntInput) PassportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Passport {
		return vs[0].([]*Passport)[vs[1].(int)]
	}).(PassportOutput)
}

type PassportMapOutput struct{ *pulumi.OutputState }

func (PassportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Passport)(nil)).Elem()
}

func (o PassportMapOutput) ToPassportMapOutput() PassportMapOutput {
	return o
}

func (o PassportMapOutput) ToPassportMapOutputWithContext(ctx context.Context) PassportMapOutput {
	return o
}

func (o PassportMapOutput) MapIndex(k pulumi.StringInput) PassportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Passport {
		return vs[0].(map[string]*Passport)[vs[1].(string)]
	}).(PassportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PassportInput)(nil)).Elem(), &Passport{})
	pulumi.RegisterInputType(reflect.TypeOf((*PassportArrayInput)(nil)).Elem(), PassportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PassportMapInput)(nil)).Elem(), PassportMap{})
	pulumi.RegisterOutputType(PassportOutput{})
	pulumi.RegisterOutputType(PassportArrayOutput{})
	pulumi.RegisterOutputType(PassportMapOutput{})
}
