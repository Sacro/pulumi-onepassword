// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The category of the item. One of [ApiCredential, BankAccount, CreditCard, CryptoWallet, Database, Document, DriverLicense, EmailAccount, Identity, Item, Login, MedicalRecord, Membership, OutdoorLicense, Passport, Password, RewardProgram, SecureNote, Server, SocialSecurityNumber, SoftwareLicense, SshKey, WirelessRouter]
type Category string

const (
	CategoryApiCredential        = Category("API Credential")
	CategoryBankAccount          = Category("Bank Account")
	CategoryCreditCard           = Category("Credit Card")
	CategoryCryptoWallet         = Category("Crypto Wallet")
	CategoryDatabase             = Category("Database")
	CategoryDocument             = Category("Document")
	CategoryDriverLicense        = Category("Driver License")
	CategoryEmailAccount         = Category("Email Account")
	CategoryIdentity             = Category("Identity")
	CategoryItem                 = Category("Item")
	CategoryLogin                = Category("Login")
	CategoryMedicalRecord        = Category("Medical Record")
	CategoryMembership           = Category("Membership")
	CategoryOutdoorLicense       = Category("Outdoor License")
	CategoryPassport             = Category("Passport")
	CategoryPassword             = Category("Password")
	CategoryRewardProgram        = Category("Reward Program")
	CategorySshKey               = Category("SSH Key")
	CategorySecureNote           = Category("Secure Note")
	CategoryServer               = Category("Server")
	CategorySocialSecurityNumber = Category("Social Security Number")
	CategorySoftwareLicense      = Category("Software License")
	CategoryWirelessRouter       = Category("Wireless Router")
)

type FieldPurpose string

const (
	FieldPurposeUsername = FieldPurpose("USERNAME")
	FieldPurposePassword = FieldPurpose("PASSWORD")
	FieldPurposeNote     = FieldPurpose("NOTE")
)

func (FieldPurpose) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldPurpose)(nil)).Elem()
}

func (e FieldPurpose) ToFieldPurposeOutput() FieldPurposeOutput {
	return pulumi.ToOutput(e).(FieldPurposeOutput)
}

func (e FieldPurpose) ToFieldPurposeOutputWithContext(ctx context.Context) FieldPurposeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FieldPurposeOutput)
}

func (e FieldPurpose) ToFieldPurposePtrOutput() FieldPurposePtrOutput {
	return e.ToFieldPurposePtrOutputWithContext(context.Background())
}

func (e FieldPurpose) ToFieldPurposePtrOutputWithContext(ctx context.Context) FieldPurposePtrOutput {
	return FieldPurpose(e).ToFieldPurposeOutputWithContext(ctx).ToFieldPurposePtrOutputWithContext(ctx)
}

func (e FieldPurpose) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FieldPurpose) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FieldPurpose) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FieldPurpose) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FieldPurposeOutput struct{ *pulumi.OutputState }

func (FieldPurposeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldPurpose)(nil)).Elem()
}

func (o FieldPurposeOutput) ToFieldPurposeOutput() FieldPurposeOutput {
	return o
}

func (o FieldPurposeOutput) ToFieldPurposeOutputWithContext(ctx context.Context) FieldPurposeOutput {
	return o
}

func (o FieldPurposeOutput) ToFieldPurposePtrOutput() FieldPurposePtrOutput {
	return o.ToFieldPurposePtrOutputWithContext(context.Background())
}

func (o FieldPurposeOutput) ToFieldPurposePtrOutputWithContext(ctx context.Context) FieldPurposePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FieldPurpose) *FieldPurpose {
		return &v
	}).(FieldPurposePtrOutput)
}

func (o FieldPurposeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FieldPurposeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FieldPurpose) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FieldPurposeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FieldPurposeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FieldPurpose) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FieldPurposePtrOutput struct{ *pulumi.OutputState }

func (FieldPurposePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FieldPurpose)(nil)).Elem()
}

func (o FieldPurposePtrOutput) ToFieldPurposePtrOutput() FieldPurposePtrOutput {
	return o
}

func (o FieldPurposePtrOutput) ToFieldPurposePtrOutputWithContext(ctx context.Context) FieldPurposePtrOutput {
	return o
}

func (o FieldPurposePtrOutput) Elem() FieldPurposeOutput {
	return o.ApplyT(func(v *FieldPurpose) FieldPurpose {
		if v != nil {
			return *v
		}
		var ret FieldPurpose
		return ret
	}).(FieldPurposeOutput)
}

func (o FieldPurposePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FieldPurposePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FieldPurpose) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FieldPurposeInput is an input type that accepts FieldPurposeArgs and FieldPurposeOutput values.
// You can construct a concrete instance of `FieldPurposeInput` via:
//
//	FieldPurposeArgs{...}
type FieldPurposeInput interface {
	pulumi.Input

	ToFieldPurposeOutput() FieldPurposeOutput
	ToFieldPurposeOutputWithContext(context.Context) FieldPurposeOutput
}

var fieldPurposePtrType = reflect.TypeOf((**FieldPurpose)(nil)).Elem()

type FieldPurposePtrInput interface {
	pulumi.Input

	ToFieldPurposePtrOutput() FieldPurposePtrOutput
	ToFieldPurposePtrOutputWithContext(context.Context) FieldPurposePtrOutput
}

type fieldPurposePtr string

func FieldPurposePtr(v string) FieldPurposePtrInput {
	return (*fieldPurposePtr)(&v)
}

func (*fieldPurposePtr) ElementType() reflect.Type {
	return fieldPurposePtrType
}

func (in *fieldPurposePtr) ToFieldPurposePtrOutput() FieldPurposePtrOutput {
	return pulumi.ToOutput(in).(FieldPurposePtrOutput)
}

func (in *fieldPurposePtr) ToFieldPurposePtrOutputWithContext(ctx context.Context) FieldPurposePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FieldPurposePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FieldPurposeInput)(nil)).Elem(), FieldPurpose("USERNAME"))
	pulumi.RegisterInputType(reflect.TypeOf((*FieldPurposePtrInput)(nil)).Elem(), FieldPurpose("USERNAME"))
	pulumi.RegisterOutputType(FieldPurposeOutput{})
	pulumi.RegisterOutputType(FieldPurposePtrOutput{})
}
