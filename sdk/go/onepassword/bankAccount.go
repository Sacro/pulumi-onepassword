// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-onepassword/sdk/go/onepassword/bankaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BankAccount struct {
	pulumi.CustomResourceState

	AccountNumber     pulumi.StringPtrOutput                 `pulumi:"accountNumber"`
	BankName          pulumi.StringPtrOutput                 `pulumi:"bankName"`
	BranchInformation bankaccount.BranchInformationPtrOutput `pulumi:"branchInformation"`
	Category          pulumi.StringOutput                    `pulumi:"category"`
	Fields            GetFieldArrayOutput                    `pulumi:"fields"`
	Iban              pulumi.StringPtrOutput                 `pulumi:"iban"`
	Id                pulumi.StringOutput                    `pulumi:"id"`
	NameOnAccount     pulumi.StringPtrOutput                 `pulumi:"nameOnAccount"`
	Notes             pulumi.StringPtrOutput                 `pulumi:"notes"`
	Pin               pulumi.StringPtrOutput                 `pulumi:"pin"`
	RoutingNumber     pulumi.StringPtrOutput                 `pulumi:"routingNumber"`
	Sections          GetSectionArrayOutput                  `pulumi:"sections"`
	Swift             pulumi.StringPtrOutput                 `pulumi:"swift"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringOutput    `pulumi:"title"`
	Type  pulumi.StringPtrOutput `pulumi:"type"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewBankAccount registers a new resource with the given unique name, arguments, and options.
func NewBankAccount(ctx *pulumi.Context,
	name string, args *BankAccountArgs, opts ...pulumi.ResourceOption) (*BankAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	var resource BankAccount
	err := ctx.RegisterResource("onepassword:index:BankAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBankAccount gets an existing BankAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBankAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BankAccountState, opts ...pulumi.ResourceOption) (*BankAccount, error) {
	var resource BankAccount
	err := ctx.ReadResource("onepassword:index:BankAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BankAccount resources.
type bankAccountState struct {
}

type BankAccountState struct {
}

func (BankAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*bankAccountState)(nil)).Elem()
}

type bankAccountArgs struct {
	AccountNumber     *string                        `pulumi:"accountNumber"`
	BankName          *string                        `pulumi:"bankName"`
	BranchInformation *bankaccount.BranchInformation `pulumi:"branchInformation"`
	Fields            []Field                        `pulumi:"fields"`
	Iban              *string                        `pulumi:"iban"`
	NameOnAccount     *string                        `pulumi:"nameOnAccount"`
	Notes             *string                        `pulumi:"notes"`
	Pin               *string                        `pulumi:"pin"`
	RoutingNumber     *string                        `pulumi:"routingNumber"`
	Sections          []Section                      `pulumi:"sections"`
	Swift             *string                        `pulumi:"swift"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title string  `pulumi:"title"`
	Type  *string `pulumi:"type"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// The set of arguments for constructing a BankAccount resource.
type BankAccountArgs struct {
	AccountNumber     pulumi.StringPtrInput
	BankName          pulumi.StringPtrInput
	BranchInformation bankaccount.BranchInformationPtrInput
	Fields            FieldArrayInput
	Iban              pulumi.StringPtrInput
	NameOnAccount     pulumi.StringPtrInput
	Notes             pulumi.StringPtrInput
	Pin               pulumi.StringPtrInput
	RoutingNumber     pulumi.StringPtrInput
	Sections          SectionArrayInput
	Swift             pulumi.StringPtrInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringInput
	Type  pulumi.StringPtrInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput
}

func (BankAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bankAccountArgs)(nil)).Elem()
}

type BankAccountInput interface {
	pulumi.Input

	ToBankAccountOutput() BankAccountOutput
	ToBankAccountOutputWithContext(ctx context.Context) BankAccountOutput
}

func (*BankAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**BankAccount)(nil)).Elem()
}

func (i *BankAccount) ToBankAccountOutput() BankAccountOutput {
	return i.ToBankAccountOutputWithContext(context.Background())
}

func (i *BankAccount) ToBankAccountOutputWithContext(ctx context.Context) BankAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BankAccountOutput)
}

// BankAccountArrayInput is an input type that accepts BankAccountArray and BankAccountArrayOutput values.
// You can construct a concrete instance of `BankAccountArrayInput` via:
//
//	BankAccountArray{ BankAccountArgs{...} }
type BankAccountArrayInput interface {
	pulumi.Input

	ToBankAccountArrayOutput() BankAccountArrayOutput
	ToBankAccountArrayOutputWithContext(context.Context) BankAccountArrayOutput
}

type BankAccountArray []BankAccountInput

func (BankAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BankAccount)(nil)).Elem()
}

func (i BankAccountArray) ToBankAccountArrayOutput() BankAccountArrayOutput {
	return i.ToBankAccountArrayOutputWithContext(context.Background())
}

func (i BankAccountArray) ToBankAccountArrayOutputWithContext(ctx context.Context) BankAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BankAccountArrayOutput)
}

// BankAccountMapInput is an input type that accepts BankAccountMap and BankAccountMapOutput values.
// You can construct a concrete instance of `BankAccountMapInput` via:
//
//	BankAccountMap{ "key": BankAccountArgs{...} }
type BankAccountMapInput interface {
	pulumi.Input

	ToBankAccountMapOutput() BankAccountMapOutput
	ToBankAccountMapOutputWithContext(context.Context) BankAccountMapOutput
}

type BankAccountMap map[string]BankAccountInput

func (BankAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BankAccount)(nil)).Elem()
}

func (i BankAccountMap) ToBankAccountMapOutput() BankAccountMapOutput {
	return i.ToBankAccountMapOutputWithContext(context.Background())
}

func (i BankAccountMap) ToBankAccountMapOutputWithContext(ctx context.Context) BankAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BankAccountMapOutput)
}

type BankAccountOutput struct{ *pulumi.OutputState }

func (BankAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BankAccount)(nil)).Elem()
}

func (o BankAccountOutput) ToBankAccountOutput() BankAccountOutput {
	return o
}

func (o BankAccountOutput) ToBankAccountOutputWithContext(ctx context.Context) BankAccountOutput {
	return o
}

type BankAccountArrayOutput struct{ *pulumi.OutputState }

func (BankAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BankAccount)(nil)).Elem()
}

func (o BankAccountArrayOutput) ToBankAccountArrayOutput() BankAccountArrayOutput {
	return o
}

func (o BankAccountArrayOutput) ToBankAccountArrayOutputWithContext(ctx context.Context) BankAccountArrayOutput {
	return o
}

func (o BankAccountArrayOutput) Index(i pulumi.IntInput) BankAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BankAccount {
		return vs[0].([]*BankAccount)[vs[1].(int)]
	}).(BankAccountOutput)
}

type BankAccountMapOutput struct{ *pulumi.OutputState }

func (BankAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BankAccount)(nil)).Elem()
}

func (o BankAccountMapOutput) ToBankAccountMapOutput() BankAccountMapOutput {
	return o
}

func (o BankAccountMapOutput) ToBankAccountMapOutputWithContext(ctx context.Context) BankAccountMapOutput {
	return o
}

func (o BankAccountMapOutput) MapIndex(k pulumi.StringInput) BankAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BankAccount {
		return vs[0].(map[string]*BankAccount)[vs[1].(string)]
	}).(BankAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BankAccountInput)(nil)).Elem(), &BankAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*BankAccountArrayInput)(nil)).Elem(), BankAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BankAccountMapInput)(nil)).Elem(), BankAccountMap{})
	pulumi.RegisterOutputType(BankAccountOutput{})
	pulumi.RegisterOutputType(BankAccountArrayOutput{})
	pulumi.RegisterOutputType(BankAccountMapOutput{})
}
