// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Field struct {
	Purpose FieldPurpose `pulumi:"purpose"`
	Value   string       `pulumi:"value"`
}

// Defaults sets the appropriate defaults for Field
func (val *Field) Defaults() *Field {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Purpose) {
		tmp.Purpose = FieldPurpose("NOTE")
	}
	return &tmp
}

// FieldInput is an input type that accepts FieldArgs and FieldOutput values.
// You can construct a concrete instance of `FieldInput` via:
//
//	FieldArgs{...}
type FieldInput interface {
	pulumi.Input

	ToFieldOutput() FieldOutput
	ToFieldOutputWithContext(context.Context) FieldOutput
}

type FieldArgs struct {
	Purpose FieldPurposeInput  `pulumi:"purpose"`
	Value   pulumi.StringInput `pulumi:"value"`
}

func (FieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (i FieldArgs) ToFieldOutput() FieldOutput {
	return i.ToFieldOutputWithContext(context.Background())
}

func (i FieldArgs) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldOutput)
}

// FieldMapInput is an input type that accepts FieldMap and FieldMapOutput values.
// You can construct a concrete instance of `FieldMapInput` via:
//
//	FieldMap{ "key": FieldArgs{...} }
type FieldMapInput interface {
	pulumi.Input

	ToFieldMapOutput() FieldMapOutput
	ToFieldMapOutputWithContext(context.Context) FieldMapOutput
}

type FieldMap map[string]FieldInput

func (FieldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Field)(nil)).Elem()
}

func (i FieldMap) ToFieldMapOutput() FieldMapOutput {
	return i.ToFieldMapOutputWithContext(context.Background())
}

func (i FieldMap) ToFieldMapOutputWithContext(ctx context.Context) FieldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMapOutput)
}

type FieldOutput struct{ *pulumi.OutputState }

func (FieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (o FieldOutput) ToFieldOutput() FieldOutput {
	return o
}

func (o FieldOutput) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return o
}

func (o FieldOutput) Purpose() FieldPurposeOutput {
	return o.ApplyT(func(v Field) FieldPurpose { return v.Purpose }).(FieldPurposeOutput)
}

func (o FieldOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v Field) string { return v.Value }).(pulumi.StringOutput)
}

type FieldMapOutput struct{ *pulumi.OutputState }

func (FieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Field)(nil)).Elem()
}

func (o FieldMapOutput) ToFieldMapOutput() FieldMapOutput {
	return o
}

func (o FieldMapOutput) ToFieldMapOutputWithContext(ctx context.Context) FieldMapOutput {
	return o
}

func (o FieldMapOutput) MapIndex(k pulumi.StringInput) FieldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Field {
		return vs[0].(map[string]Field)[vs[1].(string)]
	}).(FieldOutput)
}

type GetField struct {
	Label     string       `pulumi:"label"`
	Purpose   FieldPurpose `pulumi:"purpose"`
	Reference *string      `pulumi:"reference"`
	Uuid      string       `pulumi:"uuid"`
	Value     string       `pulumi:"value"`
}

type GetFieldOutput struct{ *pulumi.OutputState }

func (GetFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetField)(nil)).Elem()
}

func (o GetFieldOutput) ToGetFieldOutput() GetFieldOutput {
	return o
}

func (o GetFieldOutput) ToGetFieldOutputWithContext(ctx context.Context) GetFieldOutput {
	return o
}

func (o GetFieldOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetField) string { return v.Label }).(pulumi.StringOutput)
}

func (o GetFieldOutput) Purpose() FieldPurposeOutput {
	return o.ApplyT(func(v GetField) FieldPurpose { return v.Purpose }).(FieldPurposeOutput)
}

func (o GetFieldOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetField) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

func (o GetFieldOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetField) string { return v.Uuid }).(pulumi.StringOutput)
}

func (o GetFieldOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetField) string { return v.Value }).(pulumi.StringOutput)
}

type GetFieldMapOutput struct{ *pulumi.OutputState }

func (GetFieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GetField)(nil)).Elem()
}

func (o GetFieldMapOutput) ToGetFieldMapOutput() GetFieldMapOutput {
	return o
}

func (o GetFieldMapOutput) ToGetFieldMapOutputWithContext(ctx context.Context) GetFieldMapOutput {
	return o
}

func (o GetFieldMapOutput) MapIndex(k pulumi.StringInput) GetFieldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GetField {
		return vs[0].(map[string]GetField)[vs[1].(string)]
	}).(GetFieldOutput)
}

type GetSection struct {
	Fields map[string]GetField `pulumi:"fields"`
	Label  string              `pulumi:"label"`
	Uuid   string              `pulumi:"uuid"`
}

type GetSectionOutput struct{ *pulumi.OutputState }

func (GetSectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSection)(nil)).Elem()
}

func (o GetSectionOutput) ToGetSectionOutput() GetSectionOutput {
	return o
}

func (o GetSectionOutput) ToGetSectionOutputWithContext(ctx context.Context) GetSectionOutput {
	return o
}

func (o GetSectionOutput) Fields() GetFieldMapOutput {
	return o.ApplyT(func(v GetSection) map[string]GetField { return v.Fields }).(GetFieldMapOutput)
}

func (o GetSectionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetSection) string { return v.Label }).(pulumi.StringOutput)
}

func (o GetSectionOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetSection) string { return v.Uuid }).(pulumi.StringOutput)
}

type GetSectionMapOutput struct{ *pulumi.OutputState }

func (GetSectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GetSection)(nil)).Elem()
}

func (o GetSectionMapOutput) ToGetSectionMapOutput() GetSectionMapOutput {
	return o
}

func (o GetSectionMapOutput) ToGetSectionMapOutputWithContext(ctx context.Context) GetSectionMapOutput {
	return o
}

func (o GetSectionMapOutput) MapIndex(k pulumi.StringInput) GetSectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GetSection {
		return vs[0].(map[string]GetSection)[vs[1].(string)]
	}).(GetSectionOutput)
}

type Section struct {
	Fields map[string]Field `pulumi:"fields"`
}

// SectionInput is an input type that accepts SectionArgs and SectionOutput values.
// You can construct a concrete instance of `SectionInput` via:
//
//	SectionArgs{...}
type SectionInput interface {
	pulumi.Input

	ToSectionOutput() SectionOutput
	ToSectionOutputWithContext(context.Context) SectionOutput
}

type SectionArgs struct {
	Fields FieldMapInput `pulumi:"fields"`
}

func (SectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Section)(nil)).Elem()
}

func (i SectionArgs) ToSectionOutput() SectionOutput {
	return i.ToSectionOutputWithContext(context.Background())
}

func (i SectionArgs) ToSectionOutputWithContext(ctx context.Context) SectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SectionOutput)
}

// SectionMapInput is an input type that accepts SectionMap and SectionMapOutput values.
// You can construct a concrete instance of `SectionMapInput` via:
//
//	SectionMap{ "key": SectionArgs{...} }
type SectionMapInput interface {
	pulumi.Input

	ToSectionMapOutput() SectionMapOutput
	ToSectionMapOutputWithContext(context.Context) SectionMapOutput
}

type SectionMap map[string]SectionInput

func (SectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Section)(nil)).Elem()
}

func (i SectionMap) ToSectionMapOutput() SectionMapOutput {
	return i.ToSectionMapOutputWithContext(context.Background())
}

func (i SectionMap) ToSectionMapOutputWithContext(ctx context.Context) SectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SectionMapOutput)
}

type SectionOutput struct{ *pulumi.OutputState }

func (SectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Section)(nil)).Elem()
}

func (o SectionOutput) ToSectionOutput() SectionOutput {
	return o
}

func (o SectionOutput) ToSectionOutputWithContext(ctx context.Context) SectionOutput {
	return o
}

func (o SectionOutput) Fields() FieldMapOutput {
	return o.ApplyT(func(v Section) map[string]Field { return v.Fields }).(FieldMapOutput)
}

type SectionMapOutput struct{ *pulumi.OutputState }

func (SectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Section)(nil)).Elem()
}

func (o SectionMapOutput) ToSectionMapOutput() SectionMapOutput {
	return o
}

func (o SectionMapOutput) ToSectionMapOutputWithContext(ctx context.Context) SectionMapOutput {
	return o
}

func (o SectionMapOutput) MapIndex(k pulumi.StringInput) SectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Section {
		return vs[0].(map[string]Section)[vs[1].(string)]
	}).(SectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FieldInput)(nil)).Elem(), FieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldMapInput)(nil)).Elem(), FieldMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*SectionInput)(nil)).Elem(), SectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SectionMapInput)(nil)).Elem(), SectionMap{})
	pulumi.RegisterOutputType(FieldOutput{})
	pulumi.RegisterOutputType(FieldMapOutput{})
	pulumi.RegisterOutputType(GetFieldOutput{})
	pulumi.RegisterOutputType(GetFieldMapOutput{})
	pulumi.RegisterOutputType(GetSectionOutput{})
	pulumi.RegisterOutputType(GetSectionMapOutput{})
	pulumi.RegisterOutputType(SectionOutput{})
	pulumi.RegisterOutputType(SectionMapOutput{})
}
