// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Field struct {
	Label   string       `pulumi:"label"`
	Purpose FieldPurpose `pulumi:"purpose"`
	Value   string       `pulumi:"value"`
}

// Defaults sets the appropriate defaults for Field
func (val *Field) Defaults() *Field {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Purpose) {
		tmp.Purpose = FieldPurpose("NOTE")
	}
	return &tmp
}

// FieldInput is an input type that accepts FieldArgs and FieldOutput values.
// You can construct a concrete instance of `FieldInput` via:
//
//	FieldArgs{...}
type FieldInput interface {
	pulumi.Input

	ToFieldOutput() FieldOutput
	ToFieldOutputWithContext(context.Context) FieldOutput
}

type FieldArgs struct {
	Label   pulumi.StringInput `pulumi:"label"`
	Purpose FieldPurposeInput  `pulumi:"purpose"`
	Value   pulumi.StringInput `pulumi:"value"`
}

func (FieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (i FieldArgs) ToFieldOutput() FieldOutput {
	return i.ToFieldOutputWithContext(context.Background())
}

func (i FieldArgs) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldOutput)
}

// FieldArrayInput is an input type that accepts FieldArray and FieldArrayOutput values.
// You can construct a concrete instance of `FieldArrayInput` via:
//
//	FieldArray{ FieldArgs{...} }
type FieldArrayInput interface {
	pulumi.Input

	ToFieldArrayOutput() FieldArrayOutput
	ToFieldArrayOutputWithContext(context.Context) FieldArrayOutput
}

type FieldArray []FieldInput

func (FieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Field)(nil)).Elem()
}

func (i FieldArray) ToFieldArrayOutput() FieldArrayOutput {
	return i.ToFieldArrayOutputWithContext(context.Background())
}

func (i FieldArray) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldArrayOutput)
}

type FieldOutput struct{ *pulumi.OutputState }

func (FieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (o FieldOutput) ToFieldOutput() FieldOutput {
	return o
}

func (o FieldOutput) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return o
}

func (o FieldOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v Field) string { return v.Label }).(pulumi.StringOutput)
}

func (o FieldOutput) Purpose() FieldPurposeOutput {
	return o.ApplyT(func(v Field) FieldPurpose { return v.Purpose }).(FieldPurposeOutput)
}

func (o FieldOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v Field) string { return v.Value }).(pulumi.StringOutput)
}

type FieldArrayOutput struct{ *pulumi.OutputState }

func (FieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Field)(nil)).Elem()
}

func (o FieldArrayOutput) ToFieldArrayOutput() FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) Index(i pulumi.IntInput) FieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Field {
		return vs[0].([]Field)[vs[1].(int)]
	}).(FieldOutput)
}

type GetField struct {
	Id      string       `pulumi:"id"`
	Label   string       `pulumi:"label"`
	Purpose FieldPurpose `pulumi:"purpose"`
	Value   string       `pulumi:"value"`
}

type GetFieldOutput struct{ *pulumi.OutputState }

func (GetFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetField)(nil)).Elem()
}

func (o GetFieldOutput) ToGetFieldOutput() GetFieldOutput {
	return o
}

func (o GetFieldOutput) ToGetFieldOutputWithContext(ctx context.Context) GetFieldOutput {
	return o
}

func (o GetFieldOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetField) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetFieldOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetField) string { return v.Label }).(pulumi.StringOutput)
}

func (o GetFieldOutput) Purpose() FieldPurposeOutput {
	return o.ApplyT(func(v GetField) FieldPurpose { return v.Purpose }).(FieldPurposeOutput)
}

func (o GetFieldOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetField) string { return v.Value }).(pulumi.StringOutput)
}

type GetFieldArrayOutput struct{ *pulumi.OutputState }

func (GetFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetField)(nil)).Elem()
}

func (o GetFieldArrayOutput) ToGetFieldArrayOutput() GetFieldArrayOutput {
	return o
}

func (o GetFieldArrayOutput) ToGetFieldArrayOutputWithContext(ctx context.Context) GetFieldArrayOutput {
	return o
}

func (o GetFieldArrayOutput) Index(i pulumi.IntInput) GetFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetField {
		return vs[0].([]GetField)[vs[1].(int)]
	}).(GetFieldOutput)
}

type GetSection struct {
	Fields []GetField `pulumi:"fields"`
	Id     string     `pulumi:"id"`
	Label  string     `pulumi:"label"`
}

type GetSectionOutput struct{ *pulumi.OutputState }

func (GetSectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSection)(nil)).Elem()
}

func (o GetSectionOutput) ToGetSectionOutput() GetSectionOutput {
	return o
}

func (o GetSectionOutput) ToGetSectionOutputWithContext(ctx context.Context) GetSectionOutput {
	return o
}

func (o GetSectionOutput) Fields() GetFieldArrayOutput {
	return o.ApplyT(func(v GetSection) []GetField { return v.Fields }).(GetFieldArrayOutput)
}

func (o GetSectionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSection) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSectionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetSection) string { return v.Label }).(pulumi.StringOutput)
}

type GetSectionArrayOutput struct{ *pulumi.OutputState }

func (GetSectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSection)(nil)).Elem()
}

func (o GetSectionArrayOutput) ToGetSectionArrayOutput() GetSectionArrayOutput {
	return o
}

func (o GetSectionArrayOutput) ToGetSectionArrayOutputWithContext(ctx context.Context) GetSectionArrayOutput {
	return o
}

func (o GetSectionArrayOutput) Index(i pulumi.IntInput) GetSectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSection {
		return vs[0].([]GetSection)[vs[1].(int)]
	}).(GetSectionOutput)
}

type Section struct {
	Fields []Field `pulumi:"fields"`
	Label  string  `pulumi:"label"`
}

// SectionInput is an input type that accepts SectionArgs and SectionOutput values.
// You can construct a concrete instance of `SectionInput` via:
//
//	SectionArgs{...}
type SectionInput interface {
	pulumi.Input

	ToSectionOutput() SectionOutput
	ToSectionOutputWithContext(context.Context) SectionOutput
}

type SectionArgs struct {
	Fields FieldArrayInput    `pulumi:"fields"`
	Label  pulumi.StringInput `pulumi:"label"`
}

func (SectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Section)(nil)).Elem()
}

func (i SectionArgs) ToSectionOutput() SectionOutput {
	return i.ToSectionOutputWithContext(context.Background())
}

func (i SectionArgs) ToSectionOutputWithContext(ctx context.Context) SectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SectionOutput)
}

// SectionArrayInput is an input type that accepts SectionArray and SectionArrayOutput values.
// You can construct a concrete instance of `SectionArrayInput` via:
//
//	SectionArray{ SectionArgs{...} }
type SectionArrayInput interface {
	pulumi.Input

	ToSectionArrayOutput() SectionArrayOutput
	ToSectionArrayOutputWithContext(context.Context) SectionArrayOutput
}

type SectionArray []SectionInput

func (SectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Section)(nil)).Elem()
}

func (i SectionArray) ToSectionArrayOutput() SectionArrayOutput {
	return i.ToSectionArrayOutputWithContext(context.Background())
}

func (i SectionArray) ToSectionArrayOutputWithContext(ctx context.Context) SectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SectionArrayOutput)
}

type SectionOutput struct{ *pulumi.OutputState }

func (SectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Section)(nil)).Elem()
}

func (o SectionOutput) ToSectionOutput() SectionOutput {
	return o
}

func (o SectionOutput) ToSectionOutputWithContext(ctx context.Context) SectionOutput {
	return o
}

func (o SectionOutput) Fields() FieldArrayOutput {
	return o.ApplyT(func(v Section) []Field { return v.Fields }).(FieldArrayOutput)
}

func (o SectionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v Section) string { return v.Label }).(pulumi.StringOutput)
}

type SectionArrayOutput struct{ *pulumi.OutputState }

func (SectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Section)(nil)).Elem()
}

func (o SectionArrayOutput) ToSectionArrayOutput() SectionArrayOutput {
	return o
}

func (o SectionArrayOutput) ToSectionArrayOutputWithContext(ctx context.Context) SectionArrayOutput {
	return o
}

func (o SectionArrayOutput) Index(i pulumi.IntInput) SectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Section {
		return vs[0].([]Section)[vs[1].(int)]
	}).(SectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FieldInput)(nil)).Elem(), FieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldArrayInput)(nil)).Elem(), FieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SectionInput)(nil)).Elem(), SectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SectionArrayInput)(nil)).Elem(), SectionArray{})
	pulumi.RegisterOutputType(FieldOutput{})
	pulumi.RegisterOutputType(FieldArrayOutput{})
	pulumi.RegisterOutputType(GetFieldOutput{})
	pulumi.RegisterOutputType(GetFieldArrayOutput{})
	pulumi.RegisterOutputType(GetSectionOutput{})
	pulumi.RegisterOutputType(GetSectionArrayOutput{})
	pulumi.RegisterOutputType(SectionOutput{})
	pulumi.RegisterOutputType(SectionArrayOutput{})
}
