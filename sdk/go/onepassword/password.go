// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Password struct {
	pulumi.CustomResourceState

	Category pulumi.StringOutput    `pulumi:"category"`
	Fields   GetFieldArrayOutput    `pulumi:"fields"`
	Id       pulumi.StringOutput    `pulumi:"id"`
	Notes    pulumi.StringPtrOutput `pulumi:"notes"`
	Password pulumi.StringPtrOutput `pulumi:"password"`
	Sections GetSectionArrayOutput  `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringOutput `pulumi:"title"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewPassword registers a new resource with the given unique name, arguments, and options.
func NewPassword(ctx *pulumi.Context,
	name string, args *PasswordArgs, opts ...pulumi.ResourceOption) (*Password, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrOutput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource Password
	err := ctx.RegisterResource("onepassword:index:Password", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPassword gets an existing Password resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordState, opts ...pulumi.ResourceOption) (*Password, error) {
	var resource Password
	err := ctx.ReadResource("onepassword:index:Password", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Password resources.
type passwordState struct {
}

type PasswordState struct {
}

func (PasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordState)(nil)).Elem()
}

type passwordArgs struct {
	Fields   []Field   `pulumi:"fields"`
	Notes    *string   `pulumi:"notes"`
	Password *string   `pulumi:"password"`
	Sections []Section `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title string `pulumi:"title"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// The set of arguments for constructing a Password resource.
type PasswordArgs struct {
	Fields   FieldArrayInput
	Notes    pulumi.StringPtrInput
	Password pulumi.StringPtrInput
	Sections SectionArrayInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput
}

func (PasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordArgs)(nil)).Elem()
}

type PasswordInput interface {
	pulumi.Input

	ToPasswordOutput() PasswordOutput
	ToPasswordOutputWithContext(ctx context.Context) PasswordOutput
}

func (*Password) ElementType() reflect.Type {
	return reflect.TypeOf((**Password)(nil)).Elem()
}

func (i *Password) ToPasswordOutput() PasswordOutput {
	return i.ToPasswordOutputWithContext(context.Background())
}

func (i *Password) ToPasswordOutputWithContext(ctx context.Context) PasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordOutput)
}

// PasswordArrayInput is an input type that accepts PasswordArray and PasswordArrayOutput values.
// You can construct a concrete instance of `PasswordArrayInput` via:
//
//	PasswordArray{ PasswordArgs{...} }
type PasswordArrayInput interface {
	pulumi.Input

	ToPasswordArrayOutput() PasswordArrayOutput
	ToPasswordArrayOutputWithContext(context.Context) PasswordArrayOutput
}

type PasswordArray []PasswordInput

func (PasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Password)(nil)).Elem()
}

func (i PasswordArray) ToPasswordArrayOutput() PasswordArrayOutput {
	return i.ToPasswordArrayOutputWithContext(context.Background())
}

func (i PasswordArray) ToPasswordArrayOutputWithContext(ctx context.Context) PasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordArrayOutput)
}

// PasswordMapInput is an input type that accepts PasswordMap and PasswordMapOutput values.
// You can construct a concrete instance of `PasswordMapInput` via:
//
//	PasswordMap{ "key": PasswordArgs{...} }
type PasswordMapInput interface {
	pulumi.Input

	ToPasswordMapOutput() PasswordMapOutput
	ToPasswordMapOutputWithContext(context.Context) PasswordMapOutput
}

type PasswordMap map[string]PasswordInput

func (PasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Password)(nil)).Elem()
}

func (i PasswordMap) ToPasswordMapOutput() PasswordMapOutput {
	return i.ToPasswordMapOutputWithContext(context.Background())
}

func (i PasswordMap) ToPasswordMapOutputWithContext(ctx context.Context) PasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordMapOutput)
}

type PasswordOutput struct{ *pulumi.OutputState }

func (PasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Password)(nil)).Elem()
}

func (o PasswordOutput) ToPasswordOutput() PasswordOutput {
	return o
}

func (o PasswordOutput) ToPasswordOutputWithContext(ctx context.Context) PasswordOutput {
	return o
}

type PasswordArrayOutput struct{ *pulumi.OutputState }

func (PasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Password)(nil)).Elem()
}

func (o PasswordArrayOutput) ToPasswordArrayOutput() PasswordArrayOutput {
	return o
}

func (o PasswordArrayOutput) ToPasswordArrayOutputWithContext(ctx context.Context) PasswordArrayOutput {
	return o
}

func (o PasswordArrayOutput) Index(i pulumi.IntInput) PasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Password {
		return vs[0].([]*Password)[vs[1].(int)]
	}).(PasswordOutput)
}

type PasswordMapOutput struct{ *pulumi.OutputState }

func (PasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Password)(nil)).Elem()
}

func (o PasswordMapOutput) ToPasswordMapOutput() PasswordMapOutput {
	return o
}

func (o PasswordMapOutput) ToPasswordMapOutputWithContext(ctx context.Context) PasswordMapOutput {
	return o
}

func (o PasswordMapOutput) MapIndex(k pulumi.StringInput) PasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Password {
		return vs[0].(map[string]*Password)[vs[1].(string)]
	}).(PasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordInput)(nil)).Elem(), &Password{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordArrayInput)(nil)).Elem(), PasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordMapInput)(nil)).Elem(), PasswordMap{})
	pulumi.RegisterOutputType(PasswordOutput{})
	pulumi.RegisterOutputType(PasswordArrayOutput{})
	pulumi.RegisterOutputType(PasswordMapOutput{})
}
