// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Onepassword
{
    /// <summary>
    /// The category of the item. One of [ApiCredential, BankAccount, CreditCard, CryptoWallet, Database, Document, DriverLicense, EmailAccount, Identity, Item, Login, MedicalRecord, Membership, OutdoorLicense, Passport, Password, RewardProgram, SecureNote, Server, SocialSecurityNumber, SoftwareLicense, SshKey, WirelessRouter]
    /// </summary>
    [EnumType]
    public readonly struct Category : IEquatable<Category>
    {
        private readonly string _value;

        private Category(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Category ApiCredential { get; } = new Category("API Credential");
        public static Category BankAccount { get; } = new Category("Bank Account");
        public static Category CreditCard { get; } = new Category("Credit Card");
        public static Category CryptoWallet { get; } = new Category("Crypto Wallet");
        public static Category Database { get; } = new Category("Database");
        public static Category Document { get; } = new Category("Document");
        public static Category DriverLicense { get; } = new Category("Driver License");
        public static Category EmailAccount { get; } = new Category("Email Account");
        public static Category Identity { get; } = new Category("Identity");
        public static Category Item { get; } = new Category("Item");
        public static Category Login { get; } = new Category("Login");
        public static Category MedicalRecord { get; } = new Category("Medical Record");
        public static Category Membership { get; } = new Category("Membership");
        public static Category OutdoorLicense { get; } = new Category("Outdoor License");
        public static Category Passport { get; } = new Category("Passport");
        public static Category Password { get; } = new Category("Password");
        public static Category RewardProgram { get; } = new Category("Reward Program");
        public static Category SshKey { get; } = new Category("SSH Key");
        public static Category SecureNote { get; } = new Category("Secure Note");
        public static Category Server { get; } = new Category("Server");
        public static Category SocialSecurityNumber { get; } = new Category("Social Security Number");
        public static Category SoftwareLicense { get; } = new Category("Software License");
        public static Category WirelessRouter { get; } = new Category("Wireless Router");

        public static bool operator ==(Category left, Category right) => left.Equals(right);
        public static bool operator !=(Category left, Category right) => !left.Equals(right);

        public static explicit operator string(Category value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Category other && Equals(other);
        public bool Equals(Category other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FieldPurpose : IEquatable<FieldPurpose>
    {
        private readonly string _value;

        private FieldPurpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FieldPurpose Username { get; } = new FieldPurpose("USERNAME");
        public static FieldPurpose Password { get; } = new FieldPurpose("PASSWORD");
        public static FieldPurpose Note { get; } = new FieldPurpose("NOTE");

        public static bool operator ==(FieldPurpose left, FieldPurpose right) => left.Equals(right);
        public static bool operator !=(FieldPurpose left, FieldPurpose right) => !left.Equals(right);

        public static explicit operator string(FieldPurpose value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FieldPurpose other && Equals(other);
        public bool Equals(FieldPurpose other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
